// Code generated by Prisma (prisma@1.23.2). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export interface Exists {
  account_messagebox: (
    where?: Account_messageboxWhereInput
  ) => Promise<boolean>;
  account_myuser: (where?: Account_myuserWhereInput) => Promise<boolean>;
  account_myuserprofile: (
    where?: Account_myuserprofileWhereInput
  ) => Promise<boolean>;
  account_ratereader: (
    where?: Account_ratereaderWhereInput
  ) => Promise<boolean>;
  auth_group: (where?: Auth_groupWhereInput) => Promise<boolean>;
  auth_group_permissions: (
    where?: Auth_group_permissionsWhereInput
  ) => Promise<boolean>;
  auth_permission: (where?: Auth_permissionWhereInput) => Promise<boolean>;
  countrycity_liner: (where?: Countrycity_linerWhereInput) => Promise<boolean>;
  countrycity_location: (
    where?: Countrycity_locationWhereInput
  ) => Promise<boolean>;
  django_admin_log: (where?: Django_admin_logWhereInput) => Promise<boolean>;
  django_content_type: (
    where?: Django_content_typeWhereInput
  ) => Promise<boolean>;
  django_migrations: (where?: Django_migrationsWhereInput) => Promise<boolean>;
  django_session: (where?: Django_sessionWhereInput) => Promise<boolean>;
  rate_client: (where?: Rate_clientWhereInput) => Promise<boolean>;
  rate_cntrtype: (where?: Rate_cntrtypeWhereInput) => Promise<boolean>;
  rate_rate: (where?: Rate_rateWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  account_messagebox: (
    where: Account_messageboxWhereUniqueInput
  ) => Account_messageboxPromise;
  account_messageboxes: (
    args?: {
      where?: Account_messageboxWhereInput;
      orderBy?: Account_messageboxOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Account_messagebox>;
  account_messageboxesConnection: (
    args?: {
      where?: Account_messageboxWhereInput;
      orderBy?: Account_messageboxOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => Account_messageboxConnectionPromise;
  account_myuser: (
    where: Account_myuserWhereUniqueInput
  ) => Account_myuserPromise;
  account_myusers: (
    args?: {
      where?: Account_myuserWhereInput;
      orderBy?: Account_myuserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Account_myuser>;
  account_myusersConnection: (
    args?: {
      where?: Account_myuserWhereInput;
      orderBy?: Account_myuserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => Account_myuserConnectionPromise;
  account_myuserprofile: (
    where: Account_myuserprofileWhereUniqueInput
  ) => Account_myuserprofilePromise;
  account_myuserprofiles: (
    args?: {
      where?: Account_myuserprofileWhereInput;
      orderBy?: Account_myuserprofileOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Account_myuserprofile>;
  account_myuserprofilesConnection: (
    args?: {
      where?: Account_myuserprofileWhereInput;
      orderBy?: Account_myuserprofileOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => Account_myuserprofileConnectionPromise;
  account_ratereader: (
    where: Account_ratereaderWhereUniqueInput
  ) => Account_ratereaderPromise;
  account_ratereaders: (
    args?: {
      where?: Account_ratereaderWhereInput;
      orderBy?: Account_ratereaderOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Account_ratereader>;
  account_ratereadersConnection: (
    args?: {
      where?: Account_ratereaderWhereInput;
      orderBy?: Account_ratereaderOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => Account_ratereaderConnectionPromise;
  auth_group: (where: Auth_groupWhereUniqueInput) => Auth_groupPromise;
  auth_groups: (
    args?: {
      where?: Auth_groupWhereInput;
      orderBy?: Auth_groupOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Auth_group>;
  auth_groupsConnection: (
    args?: {
      where?: Auth_groupWhereInput;
      orderBy?: Auth_groupOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => Auth_groupConnectionPromise;
  auth_group_permissions: (
    where: Auth_group_permissionsWhereUniqueInput
  ) => Auth_group_permissionsPromise;
  auth_group_permissionses: (
    args?: {
      where?: Auth_group_permissionsWhereInput;
      orderBy?: Auth_group_permissionsOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Auth_group_permissions>;
  auth_group_permissionsesConnection: (
    args?: {
      where?: Auth_group_permissionsWhereInput;
      orderBy?: Auth_group_permissionsOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => Auth_group_permissionsConnectionPromise;
  auth_permission: (
    where: Auth_permissionWhereUniqueInput
  ) => Auth_permissionPromise;
  auth_permissions: (
    args?: {
      where?: Auth_permissionWhereInput;
      orderBy?: Auth_permissionOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Auth_permission>;
  auth_permissionsConnection: (
    args?: {
      where?: Auth_permissionWhereInput;
      orderBy?: Auth_permissionOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => Auth_permissionConnectionPromise;
  countrycity_liner: (
    where: Countrycity_linerWhereUniqueInput
  ) => Countrycity_linerPromise;
  countrycity_liners: (
    args?: {
      where?: Countrycity_linerWhereInput;
      orderBy?: Countrycity_linerOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Countrycity_liner>;
  countrycity_linersConnection: (
    args?: {
      where?: Countrycity_linerWhereInput;
      orderBy?: Countrycity_linerOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => Countrycity_linerConnectionPromise;
  countrycity_location: (
    where: Countrycity_locationWhereUniqueInput
  ) => Countrycity_locationPromise;
  countrycity_locations: (
    args?: {
      where?: Countrycity_locationWhereInput;
      orderBy?: Countrycity_locationOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Countrycity_location>;
  countrycity_locationsConnection: (
    args?: {
      where?: Countrycity_locationWhereInput;
      orderBy?: Countrycity_locationOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => Countrycity_locationConnectionPromise;
  django_admin_log: (
    where: Django_admin_logWhereUniqueInput
  ) => Django_admin_logPromise;
  django_admin_logs: (
    args?: {
      where?: Django_admin_logWhereInput;
      orderBy?: Django_admin_logOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Django_admin_log>;
  django_admin_logsConnection: (
    args?: {
      where?: Django_admin_logWhereInput;
      orderBy?: Django_admin_logOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => Django_admin_logConnectionPromise;
  django_content_type: (
    where: Django_content_typeWhereUniqueInput
  ) => Django_content_typePromise;
  django_content_types: (
    args?: {
      where?: Django_content_typeWhereInput;
      orderBy?: Django_content_typeOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Django_content_type>;
  django_content_typesConnection: (
    args?: {
      where?: Django_content_typeWhereInput;
      orderBy?: Django_content_typeOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => Django_content_typeConnectionPromise;
  django_migrations: (
    where: Django_migrationsWhereUniqueInput
  ) => Django_migrationsPromise;
  django_migrationses: (
    args?: {
      where?: Django_migrationsWhereInput;
      orderBy?: Django_migrationsOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Django_migrations>;
  django_migrationsesConnection: (
    args?: {
      where?: Django_migrationsWhereInput;
      orderBy?: Django_migrationsOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => Django_migrationsConnectionPromise;
  django_session: (
    where: Django_sessionWhereUniqueInput
  ) => Django_sessionPromise;
  django_sessions: (
    args?: {
      where?: Django_sessionWhereInput;
      orderBy?: Django_sessionOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Django_session>;
  django_sessionsConnection: (
    args?: {
      where?: Django_sessionWhereInput;
      orderBy?: Django_sessionOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => Django_sessionConnectionPromise;
  rate_client: (where: Rate_clientWhereUniqueInput) => Rate_clientPromise;
  rate_clients: (
    args?: {
      where?: Rate_clientWhereInput;
      orderBy?: Rate_clientOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Rate_client>;
  rate_clientsConnection: (
    args?: {
      where?: Rate_clientWhereInput;
      orderBy?: Rate_clientOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => Rate_clientConnectionPromise;
  rate_cntrtype: (where: Rate_cntrtypeWhereUniqueInput) => Rate_cntrtypePromise;
  rate_cntrtypes: (
    args?: {
      where?: Rate_cntrtypeWhereInput;
      orderBy?: Rate_cntrtypeOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Rate_cntrtype>;
  rate_cntrtypesConnection: (
    args?: {
      where?: Rate_cntrtypeWhereInput;
      orderBy?: Rate_cntrtypeOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => Rate_cntrtypeConnectionPromise;
  rate_rate: (where: Rate_rateWhereUniqueInput) => Rate_ratePromise;
  rate_rates: (
    args?: {
      where?: Rate_rateWhereInput;
      orderBy?: Rate_rateOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Rate_rate>;
  rate_ratesConnection: (
    args?: {
      where?: Rate_rateWhereInput;
      orderBy?: Rate_rateOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => Rate_rateConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createAccount_messagebox: (
    data: Account_messageboxCreateInput
  ) => Account_messageboxPromise;
  updateAccount_messagebox: (
    args: {
      data: Account_messageboxUpdateInput;
      where: Account_messageboxWhereUniqueInput;
    }
  ) => Account_messageboxPromise;
  updateManyAccount_messageboxes: (
    args: {
      data: Account_messageboxUpdateManyMutationInput;
      where?: Account_messageboxWhereInput;
    }
  ) => BatchPayloadPromise;
  upsertAccount_messagebox: (
    args: {
      where: Account_messageboxWhereUniqueInput;
      create: Account_messageboxCreateInput;
      update: Account_messageboxUpdateInput;
    }
  ) => Account_messageboxPromise;
  deleteAccount_messagebox: (
    where: Account_messageboxWhereUniqueInput
  ) => Account_messageboxPromise;
  deleteManyAccount_messageboxes: (
    where?: Account_messageboxWhereInput
  ) => BatchPayloadPromise;
  createAccount_myuser: (
    data: Account_myuserCreateInput
  ) => Account_myuserPromise;
  updateAccount_myuser: (
    args: {
      data: Account_myuserUpdateInput;
      where: Account_myuserWhereUniqueInput;
    }
  ) => Account_myuserPromise;
  updateManyAccount_myusers: (
    args: {
      data: Account_myuserUpdateManyMutationInput;
      where?: Account_myuserWhereInput;
    }
  ) => BatchPayloadPromise;
  upsertAccount_myuser: (
    args: {
      where: Account_myuserWhereUniqueInput;
      create: Account_myuserCreateInput;
      update: Account_myuserUpdateInput;
    }
  ) => Account_myuserPromise;
  deleteAccount_myuser: (
    where: Account_myuserWhereUniqueInput
  ) => Account_myuserPromise;
  deleteManyAccount_myusers: (
    where?: Account_myuserWhereInput
  ) => BatchPayloadPromise;
  createAccount_myuserprofile: (
    data: Account_myuserprofileCreateInput
  ) => Account_myuserprofilePromise;
  updateAccount_myuserprofile: (
    args: {
      data: Account_myuserprofileUpdateInput;
      where: Account_myuserprofileWhereUniqueInput;
    }
  ) => Account_myuserprofilePromise;
  updateManyAccount_myuserprofiles: (
    args: {
      data: Account_myuserprofileUpdateManyMutationInput;
      where?: Account_myuserprofileWhereInput;
    }
  ) => BatchPayloadPromise;
  upsertAccount_myuserprofile: (
    args: {
      where: Account_myuserprofileWhereUniqueInput;
      create: Account_myuserprofileCreateInput;
      update: Account_myuserprofileUpdateInput;
    }
  ) => Account_myuserprofilePromise;
  deleteAccount_myuserprofile: (
    where: Account_myuserprofileWhereUniqueInput
  ) => Account_myuserprofilePromise;
  deleteManyAccount_myuserprofiles: (
    where?: Account_myuserprofileWhereInput
  ) => BatchPayloadPromise;
  createAccount_ratereader: (
    data: Account_ratereaderCreateInput
  ) => Account_ratereaderPromise;
  updateAccount_ratereader: (
    args: {
      data: Account_ratereaderUpdateInput;
      where: Account_ratereaderWhereUniqueInput;
    }
  ) => Account_ratereaderPromise;
  updateManyAccount_ratereaders: (
    args: {
      data: Account_ratereaderUpdateManyMutationInput;
      where?: Account_ratereaderWhereInput;
    }
  ) => BatchPayloadPromise;
  upsertAccount_ratereader: (
    args: {
      where: Account_ratereaderWhereUniqueInput;
      create: Account_ratereaderCreateInput;
      update: Account_ratereaderUpdateInput;
    }
  ) => Account_ratereaderPromise;
  deleteAccount_ratereader: (
    where: Account_ratereaderWhereUniqueInput
  ) => Account_ratereaderPromise;
  deleteManyAccount_ratereaders: (
    where?: Account_ratereaderWhereInput
  ) => BatchPayloadPromise;
  createAuth_group: (data: Auth_groupCreateInput) => Auth_groupPromise;
  updateAuth_group: (
    args: { data: Auth_groupUpdateInput; where: Auth_groupWhereUniqueInput }
  ) => Auth_groupPromise;
  updateManyAuth_groups: (
    args: {
      data: Auth_groupUpdateManyMutationInput;
      where?: Auth_groupWhereInput;
    }
  ) => BatchPayloadPromise;
  upsertAuth_group: (
    args: {
      where: Auth_groupWhereUniqueInput;
      create: Auth_groupCreateInput;
      update: Auth_groupUpdateInput;
    }
  ) => Auth_groupPromise;
  deleteAuth_group: (where: Auth_groupWhereUniqueInput) => Auth_groupPromise;
  deleteManyAuth_groups: (where?: Auth_groupWhereInput) => BatchPayloadPromise;
  createAuth_group_permissions: (
    data: Auth_group_permissionsCreateInput
  ) => Auth_group_permissionsPromise;
  updateAuth_group_permissions: (
    args: {
      data: Auth_group_permissionsUpdateInput;
      where: Auth_group_permissionsWhereUniqueInput;
    }
  ) => Auth_group_permissionsPromise;
  upsertAuth_group_permissions: (
    args: {
      where: Auth_group_permissionsWhereUniqueInput;
      create: Auth_group_permissionsCreateInput;
      update: Auth_group_permissionsUpdateInput;
    }
  ) => Auth_group_permissionsPromise;
  deleteAuth_group_permissions: (
    where: Auth_group_permissionsWhereUniqueInput
  ) => Auth_group_permissionsPromise;
  deleteManyAuth_group_permissionses: (
    where?: Auth_group_permissionsWhereInput
  ) => BatchPayloadPromise;
  createAuth_permission: (
    data: Auth_permissionCreateInput
  ) => Auth_permissionPromise;
  updateAuth_permission: (
    args: {
      data: Auth_permissionUpdateInput;
      where: Auth_permissionWhereUniqueInput;
    }
  ) => Auth_permissionPromise;
  updateManyAuth_permissions: (
    args: {
      data: Auth_permissionUpdateManyMutationInput;
      where?: Auth_permissionWhereInput;
    }
  ) => BatchPayloadPromise;
  upsertAuth_permission: (
    args: {
      where: Auth_permissionWhereUniqueInput;
      create: Auth_permissionCreateInput;
      update: Auth_permissionUpdateInput;
    }
  ) => Auth_permissionPromise;
  deleteAuth_permission: (
    where: Auth_permissionWhereUniqueInput
  ) => Auth_permissionPromise;
  deleteManyAuth_permissions: (
    where?: Auth_permissionWhereInput
  ) => BatchPayloadPromise;
  createCountrycity_liner: (
    data: Countrycity_linerCreateInput
  ) => Countrycity_linerPromise;
  updateCountrycity_liner: (
    args: {
      data: Countrycity_linerUpdateInput;
      where: Countrycity_linerWhereUniqueInput;
    }
  ) => Countrycity_linerPromise;
  updateManyCountrycity_liners: (
    args: {
      data: Countrycity_linerUpdateManyMutationInput;
      where?: Countrycity_linerWhereInput;
    }
  ) => BatchPayloadPromise;
  upsertCountrycity_liner: (
    args: {
      where: Countrycity_linerWhereUniqueInput;
      create: Countrycity_linerCreateInput;
      update: Countrycity_linerUpdateInput;
    }
  ) => Countrycity_linerPromise;
  deleteCountrycity_liner: (
    where: Countrycity_linerWhereUniqueInput
  ) => Countrycity_linerPromise;
  deleteManyCountrycity_liners: (
    where?: Countrycity_linerWhereInput
  ) => BatchPayloadPromise;
  createCountrycity_location: (
    data: Countrycity_locationCreateInput
  ) => Countrycity_locationPromise;
  updateCountrycity_location: (
    args: {
      data: Countrycity_locationUpdateInput;
      where: Countrycity_locationWhereUniqueInput;
    }
  ) => Countrycity_locationPromise;
  updateManyCountrycity_locations: (
    args: {
      data: Countrycity_locationUpdateManyMutationInput;
      where?: Countrycity_locationWhereInput;
    }
  ) => BatchPayloadPromise;
  upsertCountrycity_location: (
    args: {
      where: Countrycity_locationWhereUniqueInput;
      create: Countrycity_locationCreateInput;
      update: Countrycity_locationUpdateInput;
    }
  ) => Countrycity_locationPromise;
  deleteCountrycity_location: (
    where: Countrycity_locationWhereUniqueInput
  ) => Countrycity_locationPromise;
  deleteManyCountrycity_locations: (
    where?: Countrycity_locationWhereInput
  ) => BatchPayloadPromise;
  createDjango_admin_log: (
    data: Django_admin_logCreateInput
  ) => Django_admin_logPromise;
  updateDjango_admin_log: (
    args: {
      data: Django_admin_logUpdateInput;
      where: Django_admin_logWhereUniqueInput;
    }
  ) => Django_admin_logPromise;
  updateManyDjango_admin_logs: (
    args: {
      data: Django_admin_logUpdateManyMutationInput;
      where?: Django_admin_logWhereInput;
    }
  ) => BatchPayloadPromise;
  upsertDjango_admin_log: (
    args: {
      where: Django_admin_logWhereUniqueInput;
      create: Django_admin_logCreateInput;
      update: Django_admin_logUpdateInput;
    }
  ) => Django_admin_logPromise;
  deleteDjango_admin_log: (
    where: Django_admin_logWhereUniqueInput
  ) => Django_admin_logPromise;
  deleteManyDjango_admin_logs: (
    where?: Django_admin_logWhereInput
  ) => BatchPayloadPromise;
  createDjango_content_type: (
    data: Django_content_typeCreateInput
  ) => Django_content_typePromise;
  updateDjango_content_type: (
    args: {
      data: Django_content_typeUpdateInput;
      where: Django_content_typeWhereUniqueInput;
    }
  ) => Django_content_typePromise;
  updateManyDjango_content_types: (
    args: {
      data: Django_content_typeUpdateManyMutationInput;
      where?: Django_content_typeWhereInput;
    }
  ) => BatchPayloadPromise;
  upsertDjango_content_type: (
    args: {
      where: Django_content_typeWhereUniqueInput;
      create: Django_content_typeCreateInput;
      update: Django_content_typeUpdateInput;
    }
  ) => Django_content_typePromise;
  deleteDjango_content_type: (
    where: Django_content_typeWhereUniqueInput
  ) => Django_content_typePromise;
  deleteManyDjango_content_types: (
    where?: Django_content_typeWhereInput
  ) => BatchPayloadPromise;
  createDjango_migrations: (
    data: Django_migrationsCreateInput
  ) => Django_migrationsPromise;
  updateDjango_migrations: (
    args: {
      data: Django_migrationsUpdateInput;
      where: Django_migrationsWhereUniqueInput;
    }
  ) => Django_migrationsPromise;
  updateManyDjango_migrationses: (
    args: {
      data: Django_migrationsUpdateManyMutationInput;
      where?: Django_migrationsWhereInput;
    }
  ) => BatchPayloadPromise;
  upsertDjango_migrations: (
    args: {
      where: Django_migrationsWhereUniqueInput;
      create: Django_migrationsCreateInput;
      update: Django_migrationsUpdateInput;
    }
  ) => Django_migrationsPromise;
  deleteDjango_migrations: (
    where: Django_migrationsWhereUniqueInput
  ) => Django_migrationsPromise;
  deleteManyDjango_migrationses: (
    where?: Django_migrationsWhereInput
  ) => BatchPayloadPromise;
  createDjango_session: (
    data: Django_sessionCreateInput
  ) => Django_sessionPromise;
  updateDjango_session: (
    args: {
      data: Django_sessionUpdateInput;
      where: Django_sessionWhereUniqueInput;
    }
  ) => Django_sessionPromise;
  updateManyDjango_sessions: (
    args: {
      data: Django_sessionUpdateManyMutationInput;
      where?: Django_sessionWhereInput;
    }
  ) => BatchPayloadPromise;
  upsertDjango_session: (
    args: {
      where: Django_sessionWhereUniqueInput;
      create: Django_sessionCreateInput;
      update: Django_sessionUpdateInput;
    }
  ) => Django_sessionPromise;
  deleteDjango_session: (
    where: Django_sessionWhereUniqueInput
  ) => Django_sessionPromise;
  deleteManyDjango_sessions: (
    where?: Django_sessionWhereInput
  ) => BatchPayloadPromise;
  createRate_client: (data: Rate_clientCreateInput) => Rate_clientPromise;
  updateRate_client: (
    args: { data: Rate_clientUpdateInput; where: Rate_clientWhereUniqueInput }
  ) => Rate_clientPromise;
  updateManyRate_clients: (
    args: {
      data: Rate_clientUpdateManyMutationInput;
      where?: Rate_clientWhereInput;
    }
  ) => BatchPayloadPromise;
  upsertRate_client: (
    args: {
      where: Rate_clientWhereUniqueInput;
      create: Rate_clientCreateInput;
      update: Rate_clientUpdateInput;
    }
  ) => Rate_clientPromise;
  deleteRate_client: (where: Rate_clientWhereUniqueInput) => Rate_clientPromise;
  deleteManyRate_clients: (
    where?: Rate_clientWhereInput
  ) => BatchPayloadPromise;
  createRate_cntrtype: (data: Rate_cntrtypeCreateInput) => Rate_cntrtypePromise;
  updateRate_cntrtype: (
    args: {
      data: Rate_cntrtypeUpdateInput;
      where: Rate_cntrtypeWhereUniqueInput;
    }
  ) => Rate_cntrtypePromise;
  updateManyRate_cntrtypes: (
    args: {
      data: Rate_cntrtypeUpdateManyMutationInput;
      where?: Rate_cntrtypeWhereInput;
    }
  ) => BatchPayloadPromise;
  upsertRate_cntrtype: (
    args: {
      where: Rate_cntrtypeWhereUniqueInput;
      create: Rate_cntrtypeCreateInput;
      update: Rate_cntrtypeUpdateInput;
    }
  ) => Rate_cntrtypePromise;
  deleteRate_cntrtype: (
    where: Rate_cntrtypeWhereUniqueInput
  ) => Rate_cntrtypePromise;
  deleteManyRate_cntrtypes: (
    where?: Rate_cntrtypeWhereInput
  ) => BatchPayloadPromise;
  createRate_rate: (data: Rate_rateCreateInput) => Rate_ratePromise;
  updateRate_rate: (
    args: { data: Rate_rateUpdateInput; where: Rate_rateWhereUniqueInput }
  ) => Rate_ratePromise;
  updateManyRate_rates: (
    args: {
      data: Rate_rateUpdateManyMutationInput;
      where?: Rate_rateWhereInput;
    }
  ) => BatchPayloadPromise;
  upsertRate_rate: (
    args: {
      where: Rate_rateWhereUniqueInput;
      create: Rate_rateCreateInput;
      update: Rate_rateUpdateInput;
    }
  ) => Rate_ratePromise;
  deleteRate_rate: (where: Rate_rateWhereUniqueInput) => Rate_ratePromise;
  deleteManyRate_rates: (where?: Rate_rateWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  account_messagebox: (
    where?: Account_messageboxSubscriptionWhereInput
  ) => Account_messageboxSubscriptionPayloadSubscription;
  account_myuser: (
    where?: Account_myuserSubscriptionWhereInput
  ) => Account_myuserSubscriptionPayloadSubscription;
  account_myuserprofile: (
    where?: Account_myuserprofileSubscriptionWhereInput
  ) => Account_myuserprofileSubscriptionPayloadSubscription;
  account_ratereader: (
    where?: Account_ratereaderSubscriptionWhereInput
  ) => Account_ratereaderSubscriptionPayloadSubscription;
  auth_group: (
    where?: Auth_groupSubscriptionWhereInput
  ) => Auth_groupSubscriptionPayloadSubscription;
  auth_group_permissions: (
    where?: Auth_group_permissionsSubscriptionWhereInput
  ) => Auth_group_permissionsSubscriptionPayloadSubscription;
  auth_permission: (
    where?: Auth_permissionSubscriptionWhereInput
  ) => Auth_permissionSubscriptionPayloadSubscription;
  countrycity_liner: (
    where?: Countrycity_linerSubscriptionWhereInput
  ) => Countrycity_linerSubscriptionPayloadSubscription;
  countrycity_location: (
    where?: Countrycity_locationSubscriptionWhereInput
  ) => Countrycity_locationSubscriptionPayloadSubscription;
  django_admin_log: (
    where?: Django_admin_logSubscriptionWhereInput
  ) => Django_admin_logSubscriptionPayloadSubscription;
  django_content_type: (
    where?: Django_content_typeSubscriptionWhereInput
  ) => Django_content_typeSubscriptionPayloadSubscription;
  django_migrations: (
    where?: Django_migrationsSubscriptionWhereInput
  ) => Django_migrationsSubscriptionPayloadSubscription;
  django_session: (
    where?: Django_sessionSubscriptionWhereInput
  ) => Django_sessionSubscriptionPayloadSubscription;
  rate_client: (
    where?: Rate_clientSubscriptionWhereInput
  ) => Rate_clientSubscriptionPayloadSubscription;
  rate_cntrtype: (
    where?: Rate_cntrtypeSubscriptionWhereInput
  ) => Rate_cntrtypeSubscriptionPayloadSubscription;
  rate_rate: (
    where?: Rate_rateSubscriptionWhereInput
  ) => Rate_rateSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type Account_messageboxOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "msg_ASC"
  | "msg_DESC"
  | "time_ASC"
  | "time_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type Account_myuserprofileOrderByInput =
  | "company_ASC"
  | "company_DESC"
  | "id_ASC"
  | "id_DESC"
  | "image_ASC"
  | "image_DESC"
  | "job_boolean_ASC"
  | "job_boolean_DESC"
  | "profile_name_ASC"
  | "profile_name_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type Account_ratereaderOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "relationship_date_ASC"
  | "relationship_date_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type Django_admin_logOrderByInput =
  | "action_flag_ASC"
  | "action_flag_DESC"
  | "action_time_ASC"
  | "action_time_DESC"
  | "change_message_ASC"
  | "change_message_DESC"
  | "id_ASC"
  | "id_DESC"
  | "object_id_ASC"
  | "object_id_DESC"
  | "object_repr_ASC"
  | "object_repr_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type Auth_permissionOrderByInput =
  | "codename_ASC"
  | "codename_DESC"
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type Auth_group_permissionsOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type Rate_clientOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "recordedDate_ASC"
  | "recordedDate_DESC"
  | "remarks_ASC"
  | "remarks_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type Rate_rateOrderByInput =
  | "buying20_ASC"
  | "buying20_DESC"
  | "buying40_ASC"
  | "buying40_DESC"
  | "buying4H_ASC"
  | "buying4H_DESC"
  | "deleted_ASC"
  | "deleted_DESC"
  | "dischargingFT_ASC"
  | "dischargingFT_DESC"
  | "effectiveDate_ASC"
  | "effectiveDate_DESC"
  | "id_ASC"
  | "id_DESC"
  | "loadingFT_ASC"
  | "loadingFT_DESC"
  | "offeredDate_ASC"
  | "offeredDate_DESC"
  | "recordedDate_ASC"
  | "recordedDate_DESC"
  | "remark_ASC"
  | "remark_DESC"
  | "selling20_ASC"
  | "selling20_DESC"
  | "selling40_ASC"
  | "selling40_DESC"
  | "selling4H_ASC"
  | "selling4H_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type Account_myuserOrderByInput =
  | "email_ASC"
  | "email_DESC"
  | "id_ASC"
  | "id_DESC"
  | "is_active_ASC"
  | "is_active_DESC"
  | "is_admin_ASC"
  | "is_admin_DESC"
  | "last_login_ASC"
  | "last_login_DESC"
  | "nickname_ASC"
  | "nickname_DESC"
  | "password_ASC"
  | "password_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type Auth_groupOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type Countrycity_linerOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "label_ASC"
  | "label_DESC"
  | "name_ASC"
  | "name_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type Countrycity_locationOrderByInput =
  | "country_ASC"
  | "country_DESC"
  | "id_ASC"
  | "id_DESC"
  | "label_ASC"
  | "label_DESC"
  | "name_ASC"
  | "name_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type Django_content_typeOrderByInput =
  | "app_label_ASC"
  | "app_label_DESC"
  | "id_ASC"
  | "id_DESC"
  | "model_ASC"
  | "model_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type Django_migrationsOrderByInput =
  | "app_ASC"
  | "app_DESC"
  | "applied_ASC"
  | "applied_DESC"
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type Django_sessionOrderByInput =
  | "expire_date_ASC"
  | "expire_date_DESC"
  | "id_ASC"
  | "id_DESC"
  | "session_data_ASC"
  | "session_data_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type Rate_cntrtypeOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type Account_messageboxWhereUniqueInput = AtLeastOne<{
  id: Int;
}>;

export interface Account_messageboxWhereInput {
  id?: Int;
  id_not?: Int;
  id_in?: Int[] | Int;
  id_not_in?: Int[] | Int;
  id_lt?: Int;
  id_lte?: Int;
  id_gt?: Int;
  id_gte?: Int;
  msg?: String;
  msg_not?: String;
  msg_in?: String[] | String;
  msg_not_in?: String[] | String;
  msg_lt?: String;
  msg_lte?: String;
  msg_gt?: String;
  msg_gte?: String;
  msg_contains?: String;
  msg_not_contains?: String;
  msg_starts_with?: String;
  msg_not_starts_with?: String;
  msg_ends_with?: String;
  msg_not_ends_with?: String;
  receiver?: Account_myuserWhereInput;
  sender?: Account_myuserWhereInput;
  time?: DateTimeInput;
  time_not?: DateTimeInput;
  time_in?: DateTimeInput[] | DateTimeInput;
  time_not_in?: DateTimeInput[] | DateTimeInput;
  time_lt?: DateTimeInput;
  time_lte?: DateTimeInput;
  time_gt?: DateTimeInput;
  time_gte?: DateTimeInput;
  AND?: Account_messageboxWhereInput[] | Account_messageboxWhereInput;
  OR?: Account_messageboxWhereInput[] | Account_messageboxWhereInput;
  NOT?: Account_messageboxWhereInput[] | Account_messageboxWhereInput;
}

export interface Account_myuserWhereInput {
  account_messageboxes_receivers_every?: Account_messageboxWhereInput;
  account_messageboxes_receivers_some?: Account_messageboxWhereInput;
  account_messageboxes_receivers_none?: Account_messageboxWhereInput;
  account_messageboxes_senders_every?: Account_messageboxWhereInput;
  account_messageboxes_senders_some?: Account_messageboxWhereInput;
  account_messageboxes_senders_none?: Account_messageboxWhereInput;
  account_myuserprofiles_every?: Account_myuserprofileWhereInput;
  account_myuserprofiles_some?: Account_myuserprofileWhereInput;
  account_myuserprofiles_none?: Account_myuserprofileWhereInput;
  account_ratereaders_readers_every?: Account_ratereaderWhereInput;
  account_ratereaders_readers_some?: Account_ratereaderWhereInput;
  account_ratereaders_readers_none?: Account_ratereaderWhereInput;
  account_ratereaders_showers_every?: Account_ratereaderWhereInput;
  account_ratereaders_showers_some?: Account_ratereaderWhereInput;
  account_ratereaders_showers_none?: Account_ratereaderWhereInput;
  django_admin_logs_every?: Django_admin_logWhereInput;
  django_admin_logs_some?: Django_admin_logWhereInput;
  django_admin_logs_none?: Django_admin_logWhereInput;
  email?: String;
  email_not?: String;
  email_in?: String[] | String;
  email_not_in?: String[] | String;
  email_lt?: String;
  email_lte?: String;
  email_gt?: String;
  email_gte?: String;
  email_contains?: String;
  email_not_contains?: String;
  email_starts_with?: String;
  email_not_starts_with?: String;
  email_ends_with?: String;
  email_not_ends_with?: String;
  id?: Int;
  id_not?: Int;
  id_in?: Int[] | Int;
  id_not_in?: Int[] | Int;
  id_lt?: Int;
  id_lte?: Int;
  id_gt?: Int;
  id_gte?: Int;
  is_active?: Boolean;
  is_active_not?: Boolean;
  is_admin?: Boolean;
  is_admin_not?: Boolean;
  last_login?: DateTimeInput;
  last_login_not?: DateTimeInput;
  last_login_in?: DateTimeInput[] | DateTimeInput;
  last_login_not_in?: DateTimeInput[] | DateTimeInput;
  last_login_lt?: DateTimeInput;
  last_login_lte?: DateTimeInput;
  last_login_gt?: DateTimeInput;
  last_login_gte?: DateTimeInput;
  nickname?: String;
  nickname_not?: String;
  nickname_in?: String[] | String;
  nickname_not_in?: String[] | String;
  nickname_lt?: String;
  nickname_lte?: String;
  nickname_gt?: String;
  nickname_gte?: String;
  nickname_contains?: String;
  nickname_not_contains?: String;
  nickname_starts_with?: String;
  nickname_not_starts_with?: String;
  nickname_ends_with?: String;
  nickname_not_ends_with?: String;
  password?: String;
  password_not?: String;
  password_in?: String[] | String;
  password_not_in?: String[] | String;
  password_lt?: String;
  password_lte?: String;
  password_gt?: String;
  password_gte?: String;
  password_contains?: String;
  password_not_contains?: String;
  password_starts_with?: String;
  password_not_starts_with?: String;
  password_ends_with?: String;
  password_not_ends_with?: String;
  rate_clients_every?: Rate_clientWhereInput;
  rate_clients_some?: Rate_clientWhereInput;
  rate_clients_none?: Rate_clientWhereInput;
  rate_rates_every?: Rate_rateWhereInput;
  rate_rates_some?: Rate_rateWhereInput;
  rate_rates_none?: Rate_rateWhereInput;
  AND?: Account_myuserWhereInput[] | Account_myuserWhereInput;
  OR?: Account_myuserWhereInput[] | Account_myuserWhereInput;
  NOT?: Account_myuserWhereInput[] | Account_myuserWhereInput;
}

export interface Account_myuserprofileWhereInput {
  company?: String;
  company_not?: String;
  company_in?: String[] | String;
  company_not_in?: String[] | String;
  company_lt?: String;
  company_lte?: String;
  company_gt?: String;
  company_gte?: String;
  company_contains?: String;
  company_not_contains?: String;
  company_starts_with?: String;
  company_not_starts_with?: String;
  company_ends_with?: String;
  company_not_ends_with?: String;
  id?: Int;
  id_not?: Int;
  id_in?: Int[] | Int;
  id_not_in?: Int[] | Int;
  id_lt?: Int;
  id_lte?: Int;
  id_gt?: Int;
  id_gte?: Int;
  image?: String;
  image_not?: String;
  image_in?: String[] | String;
  image_not_in?: String[] | String;
  image_lt?: String;
  image_lte?: String;
  image_gt?: String;
  image_gte?: String;
  image_contains?: String;
  image_not_contains?: String;
  image_starts_with?: String;
  image_not_starts_with?: String;
  image_ends_with?: String;
  image_not_ends_with?: String;
  job_boolean?: String;
  job_boolean_not?: String;
  job_boolean_in?: String[] | String;
  job_boolean_not_in?: String[] | String;
  job_boolean_lt?: String;
  job_boolean_lte?: String;
  job_boolean_gt?: String;
  job_boolean_gte?: String;
  job_boolean_contains?: String;
  job_boolean_not_contains?: String;
  job_boolean_starts_with?: String;
  job_boolean_not_starts_with?: String;
  job_boolean_ends_with?: String;
  job_boolean_not_ends_with?: String;
  owner?: Account_myuserWhereInput;
  profile_name?: String;
  profile_name_not?: String;
  profile_name_in?: String[] | String;
  profile_name_not_in?: String[] | String;
  profile_name_lt?: String;
  profile_name_lte?: String;
  profile_name_gt?: String;
  profile_name_gte?: String;
  profile_name_contains?: String;
  profile_name_not_contains?: String;
  profile_name_starts_with?: String;
  profile_name_not_starts_with?: String;
  profile_name_ends_with?: String;
  profile_name_not_ends_with?: String;
  AND?: Account_myuserprofileWhereInput[] | Account_myuserprofileWhereInput;
  OR?: Account_myuserprofileWhereInput[] | Account_myuserprofileWhereInput;
  NOT?: Account_myuserprofileWhereInput[] | Account_myuserprofileWhereInput;
}

export interface Account_ratereaderWhereInput {
  id?: Int;
  id_not?: Int;
  id_in?: Int[] | Int;
  id_not_in?: Int[] | Int;
  id_lt?: Int;
  id_lte?: Int;
  id_gt?: Int;
  id_gte?: Int;
  reader?: Account_myuserWhereInput;
  relationship_date?: DateTimeInput;
  relationship_date_not?: DateTimeInput;
  relationship_date_in?: DateTimeInput[] | DateTimeInput;
  relationship_date_not_in?: DateTimeInput[] | DateTimeInput;
  relationship_date_lt?: DateTimeInput;
  relationship_date_lte?: DateTimeInput;
  relationship_date_gt?: DateTimeInput;
  relationship_date_gte?: DateTimeInput;
  shower?: Account_myuserWhereInput;
  AND?: Account_ratereaderWhereInput[] | Account_ratereaderWhereInput;
  OR?: Account_ratereaderWhereInput[] | Account_ratereaderWhereInput;
  NOT?: Account_ratereaderWhereInput[] | Account_ratereaderWhereInput;
}

export interface Django_admin_logWhereInput {
  action_flag?: Int;
  action_flag_not?: Int;
  action_flag_in?: Int[] | Int;
  action_flag_not_in?: Int[] | Int;
  action_flag_lt?: Int;
  action_flag_lte?: Int;
  action_flag_gt?: Int;
  action_flag_gte?: Int;
  action_time?: DateTimeInput;
  action_time_not?: DateTimeInput;
  action_time_in?: DateTimeInput[] | DateTimeInput;
  action_time_not_in?: DateTimeInput[] | DateTimeInput;
  action_time_lt?: DateTimeInput;
  action_time_lte?: DateTimeInput;
  action_time_gt?: DateTimeInput;
  action_time_gte?: DateTimeInput;
  change_message?: String;
  change_message_not?: String;
  change_message_in?: String[] | String;
  change_message_not_in?: String[] | String;
  change_message_lt?: String;
  change_message_lte?: String;
  change_message_gt?: String;
  change_message_gte?: String;
  change_message_contains?: String;
  change_message_not_contains?: String;
  change_message_starts_with?: String;
  change_message_not_starts_with?: String;
  change_message_ends_with?: String;
  change_message_not_ends_with?: String;
  content_type?: Django_content_typeWhereInput;
  id?: Int;
  id_not?: Int;
  id_in?: Int[] | Int;
  id_not_in?: Int[] | Int;
  id_lt?: Int;
  id_lte?: Int;
  id_gt?: Int;
  id_gte?: Int;
  object_id?: String;
  object_id_not?: String;
  object_id_in?: String[] | String;
  object_id_not_in?: String[] | String;
  object_id_lt?: String;
  object_id_lte?: String;
  object_id_gt?: String;
  object_id_gte?: String;
  object_id_contains?: String;
  object_id_not_contains?: String;
  object_id_starts_with?: String;
  object_id_not_starts_with?: String;
  object_id_ends_with?: String;
  object_id_not_ends_with?: String;
  object_repr?: String;
  object_repr_not?: String;
  object_repr_in?: String[] | String;
  object_repr_not_in?: String[] | String;
  object_repr_lt?: String;
  object_repr_lte?: String;
  object_repr_gt?: String;
  object_repr_gte?: String;
  object_repr_contains?: String;
  object_repr_not_contains?: String;
  object_repr_starts_with?: String;
  object_repr_not_starts_with?: String;
  object_repr_ends_with?: String;
  object_repr_not_ends_with?: String;
  user?: Account_myuserWhereInput;
  AND?: Django_admin_logWhereInput[] | Django_admin_logWhereInput;
  OR?: Django_admin_logWhereInput[] | Django_admin_logWhereInput;
  NOT?: Django_admin_logWhereInput[] | Django_admin_logWhereInput;
}

export interface Django_content_typeWhereInput {
  app_label?: String;
  app_label_not?: String;
  app_label_in?: String[] | String;
  app_label_not_in?: String[] | String;
  app_label_lt?: String;
  app_label_lte?: String;
  app_label_gt?: String;
  app_label_gte?: String;
  app_label_contains?: String;
  app_label_not_contains?: String;
  app_label_starts_with?: String;
  app_label_not_starts_with?: String;
  app_label_ends_with?: String;
  app_label_not_ends_with?: String;
  auth_permissions_every?: Auth_permissionWhereInput;
  auth_permissions_some?: Auth_permissionWhereInput;
  auth_permissions_none?: Auth_permissionWhereInput;
  django_admin_logs_every?: Django_admin_logWhereInput;
  django_admin_logs_some?: Django_admin_logWhereInput;
  django_admin_logs_none?: Django_admin_logWhereInput;
  id?: Int;
  id_not?: Int;
  id_in?: Int[] | Int;
  id_not_in?: Int[] | Int;
  id_lt?: Int;
  id_lte?: Int;
  id_gt?: Int;
  id_gte?: Int;
  model?: String;
  model_not?: String;
  model_in?: String[] | String;
  model_not_in?: String[] | String;
  model_lt?: String;
  model_lte?: String;
  model_gt?: String;
  model_gte?: String;
  model_contains?: String;
  model_not_contains?: String;
  model_starts_with?: String;
  model_not_starts_with?: String;
  model_ends_with?: String;
  model_not_ends_with?: String;
  AND?: Django_content_typeWhereInput[] | Django_content_typeWhereInput;
  OR?: Django_content_typeWhereInput[] | Django_content_typeWhereInput;
  NOT?: Django_content_typeWhereInput[] | Django_content_typeWhereInput;
}

export interface Auth_permissionWhereInput {
  auth_group_permissionses_every?: Auth_group_permissionsWhereInput;
  auth_group_permissionses_some?: Auth_group_permissionsWhereInput;
  auth_group_permissionses_none?: Auth_group_permissionsWhereInput;
  codename?: String;
  codename_not?: String;
  codename_in?: String[] | String;
  codename_not_in?: String[] | String;
  codename_lt?: String;
  codename_lte?: String;
  codename_gt?: String;
  codename_gte?: String;
  codename_contains?: String;
  codename_not_contains?: String;
  codename_starts_with?: String;
  codename_not_starts_with?: String;
  codename_ends_with?: String;
  codename_not_ends_with?: String;
  content_type?: Django_content_typeWhereInput;
  id?: Int;
  id_not?: Int;
  id_in?: Int[] | Int;
  id_not_in?: Int[] | Int;
  id_lt?: Int;
  id_lte?: Int;
  id_gt?: Int;
  id_gte?: Int;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  AND?: Auth_permissionWhereInput[] | Auth_permissionWhereInput;
  OR?: Auth_permissionWhereInput[] | Auth_permissionWhereInput;
  NOT?: Auth_permissionWhereInput[] | Auth_permissionWhereInput;
}

export interface Auth_group_permissionsWhereInput {
  group?: Auth_groupWhereInput;
  id?: Int;
  id_not?: Int;
  id_in?: Int[] | Int;
  id_not_in?: Int[] | Int;
  id_lt?: Int;
  id_lte?: Int;
  id_gt?: Int;
  id_gte?: Int;
  permission?: Auth_permissionWhereInput;
  AND?: Auth_group_permissionsWhereInput[] | Auth_group_permissionsWhereInput;
  OR?: Auth_group_permissionsWhereInput[] | Auth_group_permissionsWhereInput;
  NOT?: Auth_group_permissionsWhereInput[] | Auth_group_permissionsWhereInput;
}

export interface Auth_groupWhereInput {
  auth_group_permissionses_every?: Auth_group_permissionsWhereInput;
  auth_group_permissionses_some?: Auth_group_permissionsWhereInput;
  auth_group_permissionses_none?: Auth_group_permissionsWhereInput;
  id?: Int;
  id_not?: Int;
  id_in?: Int[] | Int;
  id_not_in?: Int[] | Int;
  id_lt?: Int;
  id_lte?: Int;
  id_gt?: Int;
  id_gte?: Int;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  AND?: Auth_groupWhereInput[] | Auth_groupWhereInput;
  OR?: Auth_groupWhereInput[] | Auth_groupWhereInput;
  NOT?: Auth_groupWhereInput[] | Auth_groupWhereInput;
}

export interface Rate_clientWhereInput {
  id?: Int;
  id_not?: Int;
  id_in?: Int[] | Int;
  id_not_in?: Int[] | Int;
  id_lt?: Int;
  id_lte?: Int;
  id_gt?: Int;
  id_gte?: Int;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  rate_rates_every?: Rate_rateWhereInput;
  rate_rates_some?: Rate_rateWhereInput;
  rate_rates_none?: Rate_rateWhereInput;
  recordedDate?: DateTimeInput;
  recordedDate_not?: DateTimeInput;
  recordedDate_in?: DateTimeInput[] | DateTimeInput;
  recordedDate_not_in?: DateTimeInput[] | DateTimeInput;
  recordedDate_lt?: DateTimeInput;
  recordedDate_lte?: DateTimeInput;
  recordedDate_gt?: DateTimeInput;
  recordedDate_gte?: DateTimeInput;
  remarks?: String;
  remarks_not?: String;
  remarks_in?: String[] | String;
  remarks_not_in?: String[] | String;
  remarks_lt?: String;
  remarks_lte?: String;
  remarks_gt?: String;
  remarks_gte?: String;
  remarks_contains?: String;
  remarks_not_contains?: String;
  remarks_starts_with?: String;
  remarks_not_starts_with?: String;
  remarks_ends_with?: String;
  remarks_not_ends_with?: String;
  salesman?: Account_myuserWhereInput;
  AND?: Rate_clientWhereInput[] | Rate_clientWhereInput;
  OR?: Rate_clientWhereInput[] | Rate_clientWhereInput;
  NOT?: Rate_clientWhereInput[] | Rate_clientWhereInput;
}

export interface Rate_rateWhereInput {
  account?: Rate_clientWhereInput;
  buying20?: Int;
  buying20_not?: Int;
  buying20_in?: Int[] | Int;
  buying20_not_in?: Int[] | Int;
  buying20_lt?: Int;
  buying20_lte?: Int;
  buying20_gt?: Int;
  buying20_gte?: Int;
  buying40?: Int;
  buying40_not?: Int;
  buying40_in?: Int[] | Int;
  buying40_not_in?: Int[] | Int;
  buying40_lt?: Int;
  buying40_lte?: Int;
  buying40_gt?: Int;
  buying40_gte?: Int;
  buying4H?: Int;
  buying4H_not?: Int;
  buying4H_in?: Int[] | Int;
  buying4H_not_in?: Int[] | Int;
  buying4H_lt?: Int;
  buying4H_lte?: Int;
  buying4H_gt?: Int;
  buying4H_gte?: Int;
  deleted?: Boolean;
  deleted_not?: Boolean;
  dischargingFT?: Int;
  dischargingFT_not?: Int;
  dischargingFT_in?: Int[] | Int;
  dischargingFT_not_in?: Int[] | Int;
  dischargingFT_lt?: Int;
  dischargingFT_lte?: Int;
  dischargingFT_gt?: Int;
  dischargingFT_gte?: Int;
  effectiveDate?: DateTimeInput;
  effectiveDate_not?: DateTimeInput;
  effectiveDate_in?: DateTimeInput[] | DateTimeInput;
  effectiveDate_not_in?: DateTimeInput[] | DateTimeInput;
  effectiveDate_lt?: DateTimeInput;
  effectiveDate_lte?: DateTimeInput;
  effectiveDate_gt?: DateTimeInput;
  effectiveDate_gte?: DateTimeInput;
  id?: Int;
  id_not?: Int;
  id_in?: Int[] | Int;
  id_not_in?: Int[] | Int;
  id_lt?: Int;
  id_lte?: Int;
  id_gt?: Int;
  id_gte?: Int;
  inputperson?: Account_myuserWhereInput;
  liner?: Countrycity_linerWhereInput;
  loadingFT?: Int;
  loadingFT_not?: Int;
  loadingFT_in?: Int[] | Int;
  loadingFT_not_in?: Int[] | Int;
  loadingFT_lt?: Int;
  loadingFT_lte?: Int;
  loadingFT_gt?: Int;
  loadingFT_gte?: Int;
  offeredDate?: DateTimeInput;
  offeredDate_not?: DateTimeInput;
  offeredDate_in?: DateTimeInput[] | DateTimeInput;
  offeredDate_not_in?: DateTimeInput[] | DateTimeInput;
  offeredDate_lt?: DateTimeInput;
  offeredDate_lte?: DateTimeInput;
  offeredDate_gt?: DateTimeInput;
  offeredDate_gte?: DateTimeInput;
  pod?: Countrycity_locationWhereInput;
  pol?: Countrycity_locationWhereInput;
  recordedDate?: DateTimeInput;
  recordedDate_not?: DateTimeInput;
  recordedDate_in?: DateTimeInput[] | DateTimeInput;
  recordedDate_not_in?: DateTimeInput[] | DateTimeInput;
  recordedDate_lt?: DateTimeInput;
  recordedDate_lte?: DateTimeInput;
  recordedDate_gt?: DateTimeInput;
  recordedDate_gte?: DateTimeInput;
  remark?: String;
  remark_not?: String;
  remark_in?: String[] | String;
  remark_not_in?: String[] | String;
  remark_lt?: String;
  remark_lte?: String;
  remark_gt?: String;
  remark_gte?: String;
  remark_contains?: String;
  remark_not_contains?: String;
  remark_starts_with?: String;
  remark_not_starts_with?: String;
  remark_ends_with?: String;
  remark_not_ends_with?: String;
  selling20?: Int;
  selling20_not?: Int;
  selling20_in?: Int[] | Int;
  selling20_not_in?: Int[] | Int;
  selling20_lt?: Int;
  selling20_lte?: Int;
  selling20_gt?: Int;
  selling20_gte?: Int;
  selling40?: Int;
  selling40_not?: Int;
  selling40_in?: Int[] | Int;
  selling40_not_in?: Int[] | Int;
  selling40_lt?: Int;
  selling40_lte?: Int;
  selling40_gt?: Int;
  selling40_gte?: Int;
  selling4H?: Int;
  selling4H_not?: Int;
  selling4H_in?: Int[] | Int;
  selling4H_not_in?: Int[] | Int;
  selling4H_lt?: Int;
  selling4H_lte?: Int;
  selling4H_gt?: Int;
  selling4H_gte?: Int;
  type?: Rate_cntrtypeWhereInput;
  AND?: Rate_rateWhereInput[] | Rate_rateWhereInput;
  OR?: Rate_rateWhereInput[] | Rate_rateWhereInput;
  NOT?: Rate_rateWhereInput[] | Rate_rateWhereInput;
}

export interface Countrycity_linerWhereInput {
  id?: Int;
  id_not?: Int;
  id_in?: Int[] | Int;
  id_not_in?: Int[] | Int;
  id_lt?: Int;
  id_lte?: Int;
  id_gt?: Int;
  id_gte?: Int;
  label?: String;
  label_not?: String;
  label_in?: String[] | String;
  label_not_in?: String[] | String;
  label_lt?: String;
  label_lte?: String;
  label_gt?: String;
  label_gte?: String;
  label_contains?: String;
  label_not_contains?: String;
  label_starts_with?: String;
  label_not_starts_with?: String;
  label_ends_with?: String;
  label_not_ends_with?: String;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  rate_rates_every?: Rate_rateWhereInput;
  rate_rates_some?: Rate_rateWhereInput;
  rate_rates_none?: Rate_rateWhereInput;
  AND?: Countrycity_linerWhereInput[] | Countrycity_linerWhereInput;
  OR?: Countrycity_linerWhereInput[] | Countrycity_linerWhereInput;
  NOT?: Countrycity_linerWhereInput[] | Countrycity_linerWhereInput;
}

export interface Countrycity_locationWhereInput {
  country?: String;
  country_not?: String;
  country_in?: String[] | String;
  country_not_in?: String[] | String;
  country_lt?: String;
  country_lte?: String;
  country_gt?: String;
  country_gte?: String;
  country_contains?: String;
  country_not_contains?: String;
  country_starts_with?: String;
  country_not_starts_with?: String;
  country_ends_with?: String;
  country_not_ends_with?: String;
  id?: Int;
  id_not?: Int;
  id_in?: Int[] | Int;
  id_not_in?: Int[] | Int;
  id_lt?: Int;
  id_lte?: Int;
  id_gt?: Int;
  id_gte?: Int;
  label?: String;
  label_not?: String;
  label_in?: String[] | String;
  label_not_in?: String[] | String;
  label_lt?: String;
  label_lte?: String;
  label_gt?: String;
  label_gte?: String;
  label_contains?: String;
  label_not_contains?: String;
  label_starts_with?: String;
  label_not_starts_with?: String;
  label_ends_with?: String;
  label_not_ends_with?: String;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  rate_rates_pods_every?: Rate_rateWhereInput;
  rate_rates_pods_some?: Rate_rateWhereInput;
  rate_rates_pods_none?: Rate_rateWhereInput;
  rate_rates_pols_every?: Rate_rateWhereInput;
  rate_rates_pols_some?: Rate_rateWhereInput;
  rate_rates_pols_none?: Rate_rateWhereInput;
  AND?: Countrycity_locationWhereInput[] | Countrycity_locationWhereInput;
  OR?: Countrycity_locationWhereInput[] | Countrycity_locationWhereInput;
  NOT?: Countrycity_locationWhereInput[] | Countrycity_locationWhereInput;
}

export interface Rate_cntrtypeWhereInput {
  id?: Int;
  id_not?: Int;
  id_in?: Int[] | Int;
  id_not_in?: Int[] | Int;
  id_lt?: Int;
  id_lte?: Int;
  id_gt?: Int;
  id_gte?: Int;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  rate_rates_every?: Rate_rateWhereInput;
  rate_rates_some?: Rate_rateWhereInput;
  rate_rates_none?: Rate_rateWhereInput;
  AND?: Rate_cntrtypeWhereInput[] | Rate_cntrtypeWhereInput;
  OR?: Rate_cntrtypeWhereInput[] | Rate_cntrtypeWhereInput;
  NOT?: Rate_cntrtypeWhereInput[] | Rate_cntrtypeWhereInput;
}

export type Account_myuserWhereUniqueInput = AtLeastOne<{
  email: String;
  id?: Int;
}>;

export type Account_myuserprofileWhereUniqueInput = AtLeastOne<{
  id: Int;
}>;

export type Account_ratereaderWhereUniqueInput = AtLeastOne<{
  id: Int;
}>;

export type Auth_groupWhereUniqueInput = AtLeastOne<{
  id: Int;
  name?: String;
}>;

export type Auth_group_permissionsWhereUniqueInput = AtLeastOne<{
  id: Int;
}>;

export type Auth_permissionWhereUniqueInput = AtLeastOne<{
  codename: String;
  id?: Int;
}>;

export type Countrycity_linerWhereUniqueInput = AtLeastOne<{
  id: Int;
}>;

export type Countrycity_locationWhereUniqueInput = AtLeastOne<{
  id: Int;
}>;

export type Django_admin_logWhereUniqueInput = AtLeastOne<{
  id: Int;
}>;

export type Django_content_typeWhereUniqueInput = AtLeastOne<{
  app_label: String;
  id?: Int;
  model?: String;
}>;

export type Django_migrationsWhereUniqueInput = AtLeastOne<{
  id: Int;
}>;

export interface Django_migrationsWhereInput {
  app?: String;
  app_not?: String;
  app_in?: String[] | String;
  app_not_in?: String[] | String;
  app_lt?: String;
  app_lte?: String;
  app_gt?: String;
  app_gte?: String;
  app_contains?: String;
  app_not_contains?: String;
  app_starts_with?: String;
  app_not_starts_with?: String;
  app_ends_with?: String;
  app_not_ends_with?: String;
  applied?: DateTimeInput;
  applied_not?: DateTimeInput;
  applied_in?: DateTimeInput[] | DateTimeInput;
  applied_not_in?: DateTimeInput[] | DateTimeInput;
  applied_lt?: DateTimeInput;
  applied_lte?: DateTimeInput;
  applied_gt?: DateTimeInput;
  applied_gte?: DateTimeInput;
  id?: Int;
  id_not?: Int;
  id_in?: Int[] | Int;
  id_not_in?: Int[] | Int;
  id_lt?: Int;
  id_lte?: Int;
  id_gt?: Int;
  id_gte?: Int;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  AND?: Django_migrationsWhereInput[] | Django_migrationsWhereInput;
  OR?: Django_migrationsWhereInput[] | Django_migrationsWhereInput;
  NOT?: Django_migrationsWhereInput[] | Django_migrationsWhereInput;
}

export type Django_sessionWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface Django_sessionWhereInput {
  expire_date?: DateTimeInput;
  expire_date_not?: DateTimeInput;
  expire_date_in?: DateTimeInput[] | DateTimeInput;
  expire_date_not_in?: DateTimeInput[] | DateTimeInput;
  expire_date_lt?: DateTimeInput;
  expire_date_lte?: DateTimeInput;
  expire_date_gt?: DateTimeInput;
  expire_date_gte?: DateTimeInput;
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  session_data?: String;
  session_data_not?: String;
  session_data_in?: String[] | String;
  session_data_not_in?: String[] | String;
  session_data_lt?: String;
  session_data_lte?: String;
  session_data_gt?: String;
  session_data_gte?: String;
  session_data_contains?: String;
  session_data_not_contains?: String;
  session_data_starts_with?: String;
  session_data_not_starts_with?: String;
  session_data_ends_with?: String;
  session_data_not_ends_with?: String;
  AND?: Django_sessionWhereInput[] | Django_sessionWhereInput;
  OR?: Django_sessionWhereInput[] | Django_sessionWhereInput;
  NOT?: Django_sessionWhereInput[] | Django_sessionWhereInput;
}

export type Rate_clientWhereUniqueInput = AtLeastOne<{
  id: Int;
}>;

export type Rate_cntrtypeWhereUniqueInput = AtLeastOne<{
  id: Int;
}>;

export type Rate_rateWhereUniqueInput = AtLeastOne<{
  id: Int;
}>;

export interface Account_messageboxCreateInput {
  msg: String;
  receiver?: Account_myuserCreateOneWithoutAccount_messageboxes_receiversInput;
  sender?: Account_myuserCreateOneWithoutAccount_messageboxes_sendersInput;
  time: DateTimeInput;
}

export interface Account_myuserCreateOneWithoutAccount_messageboxes_receiversInput {
  create?: Account_myuserCreateWithoutAccount_messageboxes_receiversInput;
  connect?: Account_myuserWhereUniqueInput;
}

export interface Account_myuserCreateWithoutAccount_messageboxes_receiversInput {
  account_messageboxes_senders?: Account_messageboxCreateManyWithoutSenderInput;
  account_myuserprofiles?: Account_myuserprofileCreateManyWithoutOwnerInput;
  account_ratereaders_readers?: Account_ratereaderCreateManyWithoutReaderInput;
  account_ratereaders_showers?: Account_ratereaderCreateManyWithoutShowerInput;
  django_admin_logs?: Django_admin_logCreateManyWithoutUserInput;
  email: String;
  is_active: Boolean;
  is_admin: Boolean;
  last_login?: DateTimeInput;
  nickname: String;
  password: String;
  rate_clients?: Rate_clientCreateManyWithoutSalesmanInput;
  rate_rates?: Rate_rateCreateManyWithoutInputpersonInput;
}

export interface Account_messageboxCreateManyWithoutSenderInput {
  create?:
    | Account_messageboxCreateWithoutSenderInput[]
    | Account_messageboxCreateWithoutSenderInput;
  connect?:
    | Account_messageboxWhereUniqueInput[]
    | Account_messageboxWhereUniqueInput;
}

export interface Account_messageboxCreateWithoutSenderInput {
  msg: String;
  receiver?: Account_myuserCreateOneWithoutAccount_messageboxes_receiversInput;
  time: DateTimeInput;
}

export interface Account_myuserprofileCreateManyWithoutOwnerInput {
  create?:
    | Account_myuserprofileCreateWithoutOwnerInput[]
    | Account_myuserprofileCreateWithoutOwnerInput;
  connect?:
    | Account_myuserprofileWhereUniqueInput[]
    | Account_myuserprofileWhereUniqueInput;
}

export interface Account_myuserprofileCreateWithoutOwnerInput {
  company: String;
  image: String;
  job_boolean: String;
  profile_name: String;
}

export interface Account_ratereaderCreateManyWithoutReaderInput {
  create?:
    | Account_ratereaderCreateWithoutReaderInput[]
    | Account_ratereaderCreateWithoutReaderInput;
  connect?:
    | Account_ratereaderWhereUniqueInput[]
    | Account_ratereaderWhereUniqueInput;
}

export interface Account_ratereaderCreateWithoutReaderInput {
  relationship_date: DateTimeInput;
  shower?: Account_myuserCreateOneWithoutAccount_ratereaders_showersInput;
}

export interface Account_myuserCreateOneWithoutAccount_ratereaders_showersInput {
  create?: Account_myuserCreateWithoutAccount_ratereaders_showersInput;
  connect?: Account_myuserWhereUniqueInput;
}

export interface Account_myuserCreateWithoutAccount_ratereaders_showersInput {
  account_messageboxes_receivers?: Account_messageboxCreateManyWithoutReceiverInput;
  account_messageboxes_senders?: Account_messageboxCreateManyWithoutSenderInput;
  account_myuserprofiles?: Account_myuserprofileCreateManyWithoutOwnerInput;
  account_ratereaders_readers?: Account_ratereaderCreateManyWithoutReaderInput;
  django_admin_logs?: Django_admin_logCreateManyWithoutUserInput;
  email: String;
  is_active: Boolean;
  is_admin: Boolean;
  last_login?: DateTimeInput;
  nickname: String;
  password: String;
  rate_clients?: Rate_clientCreateManyWithoutSalesmanInput;
  rate_rates?: Rate_rateCreateManyWithoutInputpersonInput;
}

export interface Account_messageboxCreateManyWithoutReceiverInput {
  create?:
    | Account_messageboxCreateWithoutReceiverInput[]
    | Account_messageboxCreateWithoutReceiverInput;
  connect?:
    | Account_messageboxWhereUniqueInput[]
    | Account_messageboxWhereUniqueInput;
}

export interface Account_messageboxCreateWithoutReceiverInput {
  msg: String;
  sender?: Account_myuserCreateOneWithoutAccount_messageboxes_sendersInput;
  time: DateTimeInput;
}

export interface Account_myuserCreateOneWithoutAccount_messageboxes_sendersInput {
  create?: Account_myuserCreateWithoutAccount_messageboxes_sendersInput;
  connect?: Account_myuserWhereUniqueInput;
}

export interface Account_myuserCreateWithoutAccount_messageboxes_sendersInput {
  account_messageboxes_receivers?: Account_messageboxCreateManyWithoutReceiverInput;
  account_myuserprofiles?: Account_myuserprofileCreateManyWithoutOwnerInput;
  account_ratereaders_readers?: Account_ratereaderCreateManyWithoutReaderInput;
  account_ratereaders_showers?: Account_ratereaderCreateManyWithoutShowerInput;
  django_admin_logs?: Django_admin_logCreateManyWithoutUserInput;
  email: String;
  is_active: Boolean;
  is_admin: Boolean;
  last_login?: DateTimeInput;
  nickname: String;
  password: String;
  rate_clients?: Rate_clientCreateManyWithoutSalesmanInput;
  rate_rates?: Rate_rateCreateManyWithoutInputpersonInput;
}

export interface Account_ratereaderCreateManyWithoutShowerInput {
  create?:
    | Account_ratereaderCreateWithoutShowerInput[]
    | Account_ratereaderCreateWithoutShowerInput;
  connect?:
    | Account_ratereaderWhereUniqueInput[]
    | Account_ratereaderWhereUniqueInput;
}

export interface Account_ratereaderCreateWithoutShowerInput {
  reader?: Account_myuserCreateOneWithoutAccount_ratereaders_readersInput;
  relationship_date: DateTimeInput;
}

export interface Account_myuserCreateOneWithoutAccount_ratereaders_readersInput {
  create?: Account_myuserCreateWithoutAccount_ratereaders_readersInput;
  connect?: Account_myuserWhereUniqueInput;
}

export interface Account_myuserCreateWithoutAccount_ratereaders_readersInput {
  account_messageboxes_receivers?: Account_messageboxCreateManyWithoutReceiverInput;
  account_messageboxes_senders?: Account_messageboxCreateManyWithoutSenderInput;
  account_myuserprofiles?: Account_myuserprofileCreateManyWithoutOwnerInput;
  account_ratereaders_showers?: Account_ratereaderCreateManyWithoutShowerInput;
  django_admin_logs?: Django_admin_logCreateManyWithoutUserInput;
  email: String;
  is_active: Boolean;
  is_admin: Boolean;
  last_login?: DateTimeInput;
  nickname: String;
  password: String;
  rate_clients?: Rate_clientCreateManyWithoutSalesmanInput;
  rate_rates?: Rate_rateCreateManyWithoutInputpersonInput;
}

export interface Django_admin_logCreateManyWithoutUserInput {
  create?:
    | Django_admin_logCreateWithoutUserInput[]
    | Django_admin_logCreateWithoutUserInput;
  connect?:
    | Django_admin_logWhereUniqueInput[]
    | Django_admin_logWhereUniqueInput;
}

export interface Django_admin_logCreateWithoutUserInput {
  action_flag: Int;
  action_time: DateTimeInput;
  change_message: String;
  content_type?: Django_content_typeCreateOneWithoutDjango_admin_logsInput;
  object_id?: String;
  object_repr: String;
}

export interface Django_content_typeCreateOneWithoutDjango_admin_logsInput {
  create?: Django_content_typeCreateWithoutDjango_admin_logsInput;
  connect?: Django_content_typeWhereUniqueInput;
}

export interface Django_content_typeCreateWithoutDjango_admin_logsInput {
  app_label: String;
  auth_permissions?: Auth_permissionCreateManyWithoutContent_typeInput;
  model: String;
}

export interface Auth_permissionCreateManyWithoutContent_typeInput {
  create?:
    | Auth_permissionCreateWithoutContent_typeInput[]
    | Auth_permissionCreateWithoutContent_typeInput;
  connect?: Auth_permissionWhereUniqueInput[] | Auth_permissionWhereUniqueInput;
}

export interface Auth_permissionCreateWithoutContent_typeInput {
  auth_group_permissionses?: Auth_group_permissionsCreateManyWithoutPermissionInput;
  codename: String;
  name: String;
}

export interface Auth_group_permissionsCreateManyWithoutPermissionInput {
  create?:
    | Auth_group_permissionsCreateWithoutPermissionInput[]
    | Auth_group_permissionsCreateWithoutPermissionInput;
  connect?:
    | Auth_group_permissionsWhereUniqueInput[]
    | Auth_group_permissionsWhereUniqueInput;
}

export interface Auth_group_permissionsCreateWithoutPermissionInput {
  group?: Auth_groupCreateOneWithoutAuth_group_permissionsesInput;
}

export interface Auth_groupCreateOneWithoutAuth_group_permissionsesInput {
  create?: Auth_groupCreateWithoutAuth_group_permissionsesInput;
  connect?: Auth_groupWhereUniqueInput;
}

export interface Auth_groupCreateWithoutAuth_group_permissionsesInput {
  name: String;
}

export interface Rate_clientCreateManyWithoutSalesmanInput {
  create?:
    | Rate_clientCreateWithoutSalesmanInput[]
    | Rate_clientCreateWithoutSalesmanInput;
  connect?: Rate_clientWhereUniqueInput[] | Rate_clientWhereUniqueInput;
}

export interface Rate_clientCreateWithoutSalesmanInput {
  name: String;
  rate_rates?: Rate_rateCreateManyWithoutAccountInput;
  recordedDate: DateTimeInput;
  remarks: String;
}

export interface Rate_rateCreateManyWithoutAccountInput {
  create?:
    | Rate_rateCreateWithoutAccountInput[]
    | Rate_rateCreateWithoutAccountInput;
  connect?: Rate_rateWhereUniqueInput[] | Rate_rateWhereUniqueInput;
}

export interface Rate_rateCreateWithoutAccountInput {
  buying20: Int;
  buying40: Int;
  buying4H: Int;
  deleted: Boolean;
  dischargingFT: Int;
  effectiveDate: DateTimeInput;
  inputperson?: Account_myuserCreateOneWithoutRate_ratesInput;
  liner?: Countrycity_linerCreateOneWithoutRate_ratesInput;
  loadingFT: Int;
  offeredDate: DateTimeInput;
  pod?: Countrycity_locationCreateOneWithoutRate_rates_podsInput;
  pol?: Countrycity_locationCreateOneWithoutRate_rates_polsInput;
  recordedDate: DateTimeInput;
  remark: String;
  selling20: Int;
  selling40: Int;
  selling4H: Int;
  type?: Rate_cntrtypeCreateOneWithoutRate_ratesInput;
}

export interface Account_myuserCreateOneWithoutRate_ratesInput {
  create?: Account_myuserCreateWithoutRate_ratesInput;
  connect?: Account_myuserWhereUniqueInput;
}

export interface Account_myuserCreateWithoutRate_ratesInput {
  account_messageboxes_receivers?: Account_messageboxCreateManyWithoutReceiverInput;
  account_messageboxes_senders?: Account_messageboxCreateManyWithoutSenderInput;
  account_myuserprofiles?: Account_myuserprofileCreateManyWithoutOwnerInput;
  account_ratereaders_readers?: Account_ratereaderCreateManyWithoutReaderInput;
  account_ratereaders_showers?: Account_ratereaderCreateManyWithoutShowerInput;
  django_admin_logs?: Django_admin_logCreateManyWithoutUserInput;
  email: String;
  is_active: Boolean;
  is_admin: Boolean;
  last_login?: DateTimeInput;
  nickname: String;
  password: String;
  rate_clients?: Rate_clientCreateManyWithoutSalesmanInput;
}

export interface Countrycity_linerCreateOneWithoutRate_ratesInput {
  create?: Countrycity_linerCreateWithoutRate_ratesInput;
  connect?: Countrycity_linerWhereUniqueInput;
}

export interface Countrycity_linerCreateWithoutRate_ratesInput {
  label: String;
  name: String;
}

export interface Countrycity_locationCreateOneWithoutRate_rates_podsInput {
  create?: Countrycity_locationCreateWithoutRate_rates_podsInput;
  connect?: Countrycity_locationWhereUniqueInput;
}

export interface Countrycity_locationCreateWithoutRate_rates_podsInput {
  country: String;
  label: String;
  name: String;
  rate_rates_pols?: Rate_rateCreateManyWithoutPolInput;
}

export interface Rate_rateCreateManyWithoutPolInput {
  create?: Rate_rateCreateWithoutPolInput[] | Rate_rateCreateWithoutPolInput;
  connect?: Rate_rateWhereUniqueInput[] | Rate_rateWhereUniqueInput;
}

export interface Rate_rateCreateWithoutPolInput {
  account?: Rate_clientCreateOneWithoutRate_ratesInput;
  buying20: Int;
  buying40: Int;
  buying4H: Int;
  deleted: Boolean;
  dischargingFT: Int;
  effectiveDate: DateTimeInput;
  inputperson?: Account_myuserCreateOneWithoutRate_ratesInput;
  liner?: Countrycity_linerCreateOneWithoutRate_ratesInput;
  loadingFT: Int;
  offeredDate: DateTimeInput;
  pod?: Countrycity_locationCreateOneWithoutRate_rates_podsInput;
  recordedDate: DateTimeInput;
  remark: String;
  selling20: Int;
  selling40: Int;
  selling4H: Int;
  type?: Rate_cntrtypeCreateOneWithoutRate_ratesInput;
}

export interface Rate_clientCreateOneWithoutRate_ratesInput {
  create?: Rate_clientCreateWithoutRate_ratesInput;
  connect?: Rate_clientWhereUniqueInput;
}

export interface Rate_clientCreateWithoutRate_ratesInput {
  name: String;
  recordedDate: DateTimeInput;
  remarks: String;
  salesman?: Account_myuserCreateOneWithoutRate_clientsInput;
}

export interface Account_myuserCreateOneWithoutRate_clientsInput {
  create?: Account_myuserCreateWithoutRate_clientsInput;
  connect?: Account_myuserWhereUniqueInput;
}

export interface Account_myuserCreateWithoutRate_clientsInput {
  account_messageboxes_receivers?: Account_messageboxCreateManyWithoutReceiverInput;
  account_messageboxes_senders?: Account_messageboxCreateManyWithoutSenderInput;
  account_myuserprofiles?: Account_myuserprofileCreateManyWithoutOwnerInput;
  account_ratereaders_readers?: Account_ratereaderCreateManyWithoutReaderInput;
  account_ratereaders_showers?: Account_ratereaderCreateManyWithoutShowerInput;
  django_admin_logs?: Django_admin_logCreateManyWithoutUserInput;
  email: String;
  is_active: Boolean;
  is_admin: Boolean;
  last_login?: DateTimeInput;
  nickname: String;
  password: String;
  rate_rates?: Rate_rateCreateManyWithoutInputpersonInput;
}

export interface Rate_rateCreateManyWithoutInputpersonInput {
  create?:
    | Rate_rateCreateWithoutInputpersonInput[]
    | Rate_rateCreateWithoutInputpersonInput;
  connect?: Rate_rateWhereUniqueInput[] | Rate_rateWhereUniqueInput;
}

export interface Rate_rateCreateWithoutInputpersonInput {
  account?: Rate_clientCreateOneWithoutRate_ratesInput;
  buying20: Int;
  buying40: Int;
  buying4H: Int;
  deleted: Boolean;
  dischargingFT: Int;
  effectiveDate: DateTimeInput;
  liner?: Countrycity_linerCreateOneWithoutRate_ratesInput;
  loadingFT: Int;
  offeredDate: DateTimeInput;
  pod?: Countrycity_locationCreateOneWithoutRate_rates_podsInput;
  pol?: Countrycity_locationCreateOneWithoutRate_rates_polsInput;
  recordedDate: DateTimeInput;
  remark: String;
  selling20: Int;
  selling40: Int;
  selling4H: Int;
  type?: Rate_cntrtypeCreateOneWithoutRate_ratesInput;
}

export interface Countrycity_locationCreateOneWithoutRate_rates_polsInput {
  create?: Countrycity_locationCreateWithoutRate_rates_polsInput;
  connect?: Countrycity_locationWhereUniqueInput;
}

export interface Countrycity_locationCreateWithoutRate_rates_polsInput {
  country: String;
  label: String;
  name: String;
  rate_rates_pods?: Rate_rateCreateManyWithoutPodInput;
}

export interface Rate_rateCreateManyWithoutPodInput {
  create?: Rate_rateCreateWithoutPodInput[] | Rate_rateCreateWithoutPodInput;
  connect?: Rate_rateWhereUniqueInput[] | Rate_rateWhereUniqueInput;
}

export interface Rate_rateCreateWithoutPodInput {
  account?: Rate_clientCreateOneWithoutRate_ratesInput;
  buying20: Int;
  buying40: Int;
  buying4H: Int;
  deleted: Boolean;
  dischargingFT: Int;
  effectiveDate: DateTimeInput;
  inputperson?: Account_myuserCreateOneWithoutRate_ratesInput;
  liner?: Countrycity_linerCreateOneWithoutRate_ratesInput;
  loadingFT: Int;
  offeredDate: DateTimeInput;
  pol?: Countrycity_locationCreateOneWithoutRate_rates_polsInput;
  recordedDate: DateTimeInput;
  remark: String;
  selling20: Int;
  selling40: Int;
  selling4H: Int;
  type?: Rate_cntrtypeCreateOneWithoutRate_ratesInput;
}

export interface Rate_cntrtypeCreateOneWithoutRate_ratesInput {
  create?: Rate_cntrtypeCreateWithoutRate_ratesInput;
  connect?: Rate_cntrtypeWhereUniqueInput;
}

export interface Rate_cntrtypeCreateWithoutRate_ratesInput {
  name: String;
}

export interface Account_messageboxUpdateInput {
  msg?: String;
  receiver?: Account_myuserUpdateOneWithoutAccount_messageboxes_receiversInput;
  sender?: Account_myuserUpdateOneWithoutAccount_messageboxes_sendersInput;
  time?: DateTimeInput;
}

export interface Account_myuserUpdateOneWithoutAccount_messageboxes_receiversInput {
  create?: Account_myuserCreateWithoutAccount_messageboxes_receiversInput;
  update?: Account_myuserUpdateWithoutAccount_messageboxes_receiversDataInput;
  upsert?: Account_myuserUpsertWithoutAccount_messageboxes_receiversInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: Account_myuserWhereUniqueInput;
}

export interface Account_myuserUpdateWithoutAccount_messageboxes_receiversDataInput {
  account_messageboxes_senders?: Account_messageboxUpdateManyWithoutSenderInput;
  account_myuserprofiles?: Account_myuserprofileUpdateManyWithoutOwnerInput;
  account_ratereaders_readers?: Account_ratereaderUpdateManyWithoutReaderInput;
  account_ratereaders_showers?: Account_ratereaderUpdateManyWithoutShowerInput;
  django_admin_logs?: Django_admin_logUpdateManyWithoutUserInput;
  email?: String;
  is_active?: Boolean;
  is_admin?: Boolean;
  last_login?: DateTimeInput;
  nickname?: String;
  password?: String;
  rate_clients?: Rate_clientUpdateManyWithoutSalesmanInput;
  rate_rates?: Rate_rateUpdateManyWithoutInputpersonInput;
}

export interface Account_messageboxUpdateManyWithoutSenderInput {
  create?:
    | Account_messageboxCreateWithoutSenderInput[]
    | Account_messageboxCreateWithoutSenderInput;
  delete?:
    | Account_messageboxWhereUniqueInput[]
    | Account_messageboxWhereUniqueInput;
  connect?:
    | Account_messageboxWhereUniqueInput[]
    | Account_messageboxWhereUniqueInput;
  disconnect?:
    | Account_messageboxWhereUniqueInput[]
    | Account_messageboxWhereUniqueInput;
  update?:
    | Account_messageboxUpdateWithWhereUniqueWithoutSenderInput[]
    | Account_messageboxUpdateWithWhereUniqueWithoutSenderInput;
  upsert?:
    | Account_messageboxUpsertWithWhereUniqueWithoutSenderInput[]
    | Account_messageboxUpsertWithWhereUniqueWithoutSenderInput;
  deleteMany?:
    | Account_messageboxScalarWhereInput[]
    | Account_messageboxScalarWhereInput;
  updateMany?:
    | Account_messageboxUpdateManyWithWhereNestedInput[]
    | Account_messageboxUpdateManyWithWhereNestedInput;
}

export interface Account_messageboxUpdateWithWhereUniqueWithoutSenderInput {
  where: Account_messageboxWhereUniqueInput;
  data: Account_messageboxUpdateWithoutSenderDataInput;
}

export interface Account_messageboxUpdateWithoutSenderDataInput {
  msg?: String;
  receiver?: Account_myuserUpdateOneWithoutAccount_messageboxes_receiversInput;
  time?: DateTimeInput;
}

export interface Account_messageboxUpsertWithWhereUniqueWithoutSenderInput {
  where: Account_messageboxWhereUniqueInput;
  update: Account_messageboxUpdateWithoutSenderDataInput;
  create: Account_messageboxCreateWithoutSenderInput;
}

export interface Account_messageboxScalarWhereInput {
  id?: Int;
  id_not?: Int;
  id_in?: Int[] | Int;
  id_not_in?: Int[] | Int;
  id_lt?: Int;
  id_lte?: Int;
  id_gt?: Int;
  id_gte?: Int;
  msg?: String;
  msg_not?: String;
  msg_in?: String[] | String;
  msg_not_in?: String[] | String;
  msg_lt?: String;
  msg_lte?: String;
  msg_gt?: String;
  msg_gte?: String;
  msg_contains?: String;
  msg_not_contains?: String;
  msg_starts_with?: String;
  msg_not_starts_with?: String;
  msg_ends_with?: String;
  msg_not_ends_with?: String;
  time?: DateTimeInput;
  time_not?: DateTimeInput;
  time_in?: DateTimeInput[] | DateTimeInput;
  time_not_in?: DateTimeInput[] | DateTimeInput;
  time_lt?: DateTimeInput;
  time_lte?: DateTimeInput;
  time_gt?: DateTimeInput;
  time_gte?: DateTimeInput;
  AND?:
    | Account_messageboxScalarWhereInput[]
    | Account_messageboxScalarWhereInput;
  OR?:
    | Account_messageboxScalarWhereInput[]
    | Account_messageboxScalarWhereInput;
  NOT?:
    | Account_messageboxScalarWhereInput[]
    | Account_messageboxScalarWhereInput;
}

export interface Account_messageboxUpdateManyWithWhereNestedInput {
  where: Account_messageboxScalarWhereInput;
  data: Account_messageboxUpdateManyDataInput;
}

export interface Account_messageboxUpdateManyDataInput {
  msg?: String;
  time?: DateTimeInput;
}

export interface Account_myuserprofileUpdateManyWithoutOwnerInput {
  create?:
    | Account_myuserprofileCreateWithoutOwnerInput[]
    | Account_myuserprofileCreateWithoutOwnerInput;
  delete?:
    | Account_myuserprofileWhereUniqueInput[]
    | Account_myuserprofileWhereUniqueInput;
  connect?:
    | Account_myuserprofileWhereUniqueInput[]
    | Account_myuserprofileWhereUniqueInput;
  disconnect?:
    | Account_myuserprofileWhereUniqueInput[]
    | Account_myuserprofileWhereUniqueInput;
  update?:
    | Account_myuserprofileUpdateWithWhereUniqueWithoutOwnerInput[]
    | Account_myuserprofileUpdateWithWhereUniqueWithoutOwnerInput;
  upsert?:
    | Account_myuserprofileUpsertWithWhereUniqueWithoutOwnerInput[]
    | Account_myuserprofileUpsertWithWhereUniqueWithoutOwnerInput;
  deleteMany?:
    | Account_myuserprofileScalarWhereInput[]
    | Account_myuserprofileScalarWhereInput;
  updateMany?:
    | Account_myuserprofileUpdateManyWithWhereNestedInput[]
    | Account_myuserprofileUpdateManyWithWhereNestedInput;
}

export interface Account_myuserprofileUpdateWithWhereUniqueWithoutOwnerInput {
  where: Account_myuserprofileWhereUniqueInput;
  data: Account_myuserprofileUpdateWithoutOwnerDataInput;
}

export interface Account_myuserprofileUpdateWithoutOwnerDataInput {
  company?: String;
  image?: String;
  job_boolean?: String;
  profile_name?: String;
}

export interface Account_myuserprofileUpsertWithWhereUniqueWithoutOwnerInput {
  where: Account_myuserprofileWhereUniqueInput;
  update: Account_myuserprofileUpdateWithoutOwnerDataInput;
  create: Account_myuserprofileCreateWithoutOwnerInput;
}

export interface Account_myuserprofileScalarWhereInput {
  company?: String;
  company_not?: String;
  company_in?: String[] | String;
  company_not_in?: String[] | String;
  company_lt?: String;
  company_lte?: String;
  company_gt?: String;
  company_gte?: String;
  company_contains?: String;
  company_not_contains?: String;
  company_starts_with?: String;
  company_not_starts_with?: String;
  company_ends_with?: String;
  company_not_ends_with?: String;
  id?: Int;
  id_not?: Int;
  id_in?: Int[] | Int;
  id_not_in?: Int[] | Int;
  id_lt?: Int;
  id_lte?: Int;
  id_gt?: Int;
  id_gte?: Int;
  image?: String;
  image_not?: String;
  image_in?: String[] | String;
  image_not_in?: String[] | String;
  image_lt?: String;
  image_lte?: String;
  image_gt?: String;
  image_gte?: String;
  image_contains?: String;
  image_not_contains?: String;
  image_starts_with?: String;
  image_not_starts_with?: String;
  image_ends_with?: String;
  image_not_ends_with?: String;
  job_boolean?: String;
  job_boolean_not?: String;
  job_boolean_in?: String[] | String;
  job_boolean_not_in?: String[] | String;
  job_boolean_lt?: String;
  job_boolean_lte?: String;
  job_boolean_gt?: String;
  job_boolean_gte?: String;
  job_boolean_contains?: String;
  job_boolean_not_contains?: String;
  job_boolean_starts_with?: String;
  job_boolean_not_starts_with?: String;
  job_boolean_ends_with?: String;
  job_boolean_not_ends_with?: String;
  profile_name?: String;
  profile_name_not?: String;
  profile_name_in?: String[] | String;
  profile_name_not_in?: String[] | String;
  profile_name_lt?: String;
  profile_name_lte?: String;
  profile_name_gt?: String;
  profile_name_gte?: String;
  profile_name_contains?: String;
  profile_name_not_contains?: String;
  profile_name_starts_with?: String;
  profile_name_not_starts_with?: String;
  profile_name_ends_with?: String;
  profile_name_not_ends_with?: String;
  AND?:
    | Account_myuserprofileScalarWhereInput[]
    | Account_myuserprofileScalarWhereInput;
  OR?:
    | Account_myuserprofileScalarWhereInput[]
    | Account_myuserprofileScalarWhereInput;
  NOT?:
    | Account_myuserprofileScalarWhereInput[]
    | Account_myuserprofileScalarWhereInput;
}

export interface Account_myuserprofileUpdateManyWithWhereNestedInput {
  where: Account_myuserprofileScalarWhereInput;
  data: Account_myuserprofileUpdateManyDataInput;
}

export interface Account_myuserprofileUpdateManyDataInput {
  company?: String;
  image?: String;
  job_boolean?: String;
  profile_name?: String;
}

export interface Account_ratereaderUpdateManyWithoutReaderInput {
  create?:
    | Account_ratereaderCreateWithoutReaderInput[]
    | Account_ratereaderCreateWithoutReaderInput;
  delete?:
    | Account_ratereaderWhereUniqueInput[]
    | Account_ratereaderWhereUniqueInput;
  connect?:
    | Account_ratereaderWhereUniqueInput[]
    | Account_ratereaderWhereUniqueInput;
  disconnect?:
    | Account_ratereaderWhereUniqueInput[]
    | Account_ratereaderWhereUniqueInput;
  update?:
    | Account_ratereaderUpdateWithWhereUniqueWithoutReaderInput[]
    | Account_ratereaderUpdateWithWhereUniqueWithoutReaderInput;
  upsert?:
    | Account_ratereaderUpsertWithWhereUniqueWithoutReaderInput[]
    | Account_ratereaderUpsertWithWhereUniqueWithoutReaderInput;
  deleteMany?:
    | Account_ratereaderScalarWhereInput[]
    | Account_ratereaderScalarWhereInput;
  updateMany?:
    | Account_ratereaderUpdateManyWithWhereNestedInput[]
    | Account_ratereaderUpdateManyWithWhereNestedInput;
}

export interface Account_ratereaderUpdateWithWhereUniqueWithoutReaderInput {
  where: Account_ratereaderWhereUniqueInput;
  data: Account_ratereaderUpdateWithoutReaderDataInput;
}

export interface Account_ratereaderUpdateWithoutReaderDataInput {
  relationship_date?: DateTimeInput;
  shower?: Account_myuserUpdateOneWithoutAccount_ratereaders_showersInput;
}

export interface Account_myuserUpdateOneWithoutAccount_ratereaders_showersInput {
  create?: Account_myuserCreateWithoutAccount_ratereaders_showersInput;
  update?: Account_myuserUpdateWithoutAccount_ratereaders_showersDataInput;
  upsert?: Account_myuserUpsertWithoutAccount_ratereaders_showersInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: Account_myuserWhereUniqueInput;
}

export interface Account_myuserUpdateWithoutAccount_ratereaders_showersDataInput {
  account_messageboxes_receivers?: Account_messageboxUpdateManyWithoutReceiverInput;
  account_messageboxes_senders?: Account_messageboxUpdateManyWithoutSenderInput;
  account_myuserprofiles?: Account_myuserprofileUpdateManyWithoutOwnerInput;
  account_ratereaders_readers?: Account_ratereaderUpdateManyWithoutReaderInput;
  django_admin_logs?: Django_admin_logUpdateManyWithoutUserInput;
  email?: String;
  is_active?: Boolean;
  is_admin?: Boolean;
  last_login?: DateTimeInput;
  nickname?: String;
  password?: String;
  rate_clients?: Rate_clientUpdateManyWithoutSalesmanInput;
  rate_rates?: Rate_rateUpdateManyWithoutInputpersonInput;
}

export interface Account_messageboxUpdateManyWithoutReceiverInput {
  create?:
    | Account_messageboxCreateWithoutReceiverInput[]
    | Account_messageboxCreateWithoutReceiverInput;
  delete?:
    | Account_messageboxWhereUniqueInput[]
    | Account_messageboxWhereUniqueInput;
  connect?:
    | Account_messageboxWhereUniqueInput[]
    | Account_messageboxWhereUniqueInput;
  disconnect?:
    | Account_messageboxWhereUniqueInput[]
    | Account_messageboxWhereUniqueInput;
  update?:
    | Account_messageboxUpdateWithWhereUniqueWithoutReceiverInput[]
    | Account_messageboxUpdateWithWhereUniqueWithoutReceiverInput;
  upsert?:
    | Account_messageboxUpsertWithWhereUniqueWithoutReceiverInput[]
    | Account_messageboxUpsertWithWhereUniqueWithoutReceiverInput;
  deleteMany?:
    | Account_messageboxScalarWhereInput[]
    | Account_messageboxScalarWhereInput;
  updateMany?:
    | Account_messageboxUpdateManyWithWhereNestedInput[]
    | Account_messageboxUpdateManyWithWhereNestedInput;
}

export interface Account_messageboxUpdateWithWhereUniqueWithoutReceiverInput {
  where: Account_messageboxWhereUniqueInput;
  data: Account_messageboxUpdateWithoutReceiverDataInput;
}

export interface Account_messageboxUpdateWithoutReceiverDataInput {
  msg?: String;
  sender?: Account_myuserUpdateOneWithoutAccount_messageboxes_sendersInput;
  time?: DateTimeInput;
}

export interface Account_myuserUpdateOneWithoutAccount_messageboxes_sendersInput {
  create?: Account_myuserCreateWithoutAccount_messageboxes_sendersInput;
  update?: Account_myuserUpdateWithoutAccount_messageboxes_sendersDataInput;
  upsert?: Account_myuserUpsertWithoutAccount_messageboxes_sendersInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: Account_myuserWhereUniqueInput;
}

export interface Account_myuserUpdateWithoutAccount_messageboxes_sendersDataInput {
  account_messageboxes_receivers?: Account_messageboxUpdateManyWithoutReceiverInput;
  account_myuserprofiles?: Account_myuserprofileUpdateManyWithoutOwnerInput;
  account_ratereaders_readers?: Account_ratereaderUpdateManyWithoutReaderInput;
  account_ratereaders_showers?: Account_ratereaderUpdateManyWithoutShowerInput;
  django_admin_logs?: Django_admin_logUpdateManyWithoutUserInput;
  email?: String;
  is_active?: Boolean;
  is_admin?: Boolean;
  last_login?: DateTimeInput;
  nickname?: String;
  password?: String;
  rate_clients?: Rate_clientUpdateManyWithoutSalesmanInput;
  rate_rates?: Rate_rateUpdateManyWithoutInputpersonInput;
}

export interface Account_ratereaderUpdateManyWithoutShowerInput {
  create?:
    | Account_ratereaderCreateWithoutShowerInput[]
    | Account_ratereaderCreateWithoutShowerInput;
  delete?:
    | Account_ratereaderWhereUniqueInput[]
    | Account_ratereaderWhereUniqueInput;
  connect?:
    | Account_ratereaderWhereUniqueInput[]
    | Account_ratereaderWhereUniqueInput;
  disconnect?:
    | Account_ratereaderWhereUniqueInput[]
    | Account_ratereaderWhereUniqueInput;
  update?:
    | Account_ratereaderUpdateWithWhereUniqueWithoutShowerInput[]
    | Account_ratereaderUpdateWithWhereUniqueWithoutShowerInput;
  upsert?:
    | Account_ratereaderUpsertWithWhereUniqueWithoutShowerInput[]
    | Account_ratereaderUpsertWithWhereUniqueWithoutShowerInput;
  deleteMany?:
    | Account_ratereaderScalarWhereInput[]
    | Account_ratereaderScalarWhereInput;
  updateMany?:
    | Account_ratereaderUpdateManyWithWhereNestedInput[]
    | Account_ratereaderUpdateManyWithWhereNestedInput;
}

export interface Account_ratereaderUpdateWithWhereUniqueWithoutShowerInput {
  where: Account_ratereaderWhereUniqueInput;
  data: Account_ratereaderUpdateWithoutShowerDataInput;
}

export interface Account_ratereaderUpdateWithoutShowerDataInput {
  reader?: Account_myuserUpdateOneWithoutAccount_ratereaders_readersInput;
  relationship_date?: DateTimeInput;
}

export interface Account_myuserUpdateOneWithoutAccount_ratereaders_readersInput {
  create?: Account_myuserCreateWithoutAccount_ratereaders_readersInput;
  update?: Account_myuserUpdateWithoutAccount_ratereaders_readersDataInput;
  upsert?: Account_myuserUpsertWithoutAccount_ratereaders_readersInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: Account_myuserWhereUniqueInput;
}

export interface Account_myuserUpdateWithoutAccount_ratereaders_readersDataInput {
  account_messageboxes_receivers?: Account_messageboxUpdateManyWithoutReceiverInput;
  account_messageboxes_senders?: Account_messageboxUpdateManyWithoutSenderInput;
  account_myuserprofiles?: Account_myuserprofileUpdateManyWithoutOwnerInput;
  account_ratereaders_showers?: Account_ratereaderUpdateManyWithoutShowerInput;
  django_admin_logs?: Django_admin_logUpdateManyWithoutUserInput;
  email?: String;
  is_active?: Boolean;
  is_admin?: Boolean;
  last_login?: DateTimeInput;
  nickname?: String;
  password?: String;
  rate_clients?: Rate_clientUpdateManyWithoutSalesmanInput;
  rate_rates?: Rate_rateUpdateManyWithoutInputpersonInput;
}

export interface Django_admin_logUpdateManyWithoutUserInput {
  create?:
    | Django_admin_logCreateWithoutUserInput[]
    | Django_admin_logCreateWithoutUserInput;
  delete?:
    | Django_admin_logWhereUniqueInput[]
    | Django_admin_logWhereUniqueInput;
  connect?:
    | Django_admin_logWhereUniqueInput[]
    | Django_admin_logWhereUniqueInput;
  disconnect?:
    | Django_admin_logWhereUniqueInput[]
    | Django_admin_logWhereUniqueInput;
  update?:
    | Django_admin_logUpdateWithWhereUniqueWithoutUserInput[]
    | Django_admin_logUpdateWithWhereUniqueWithoutUserInput;
  upsert?:
    | Django_admin_logUpsertWithWhereUniqueWithoutUserInput[]
    | Django_admin_logUpsertWithWhereUniqueWithoutUserInput;
  deleteMany?:
    | Django_admin_logScalarWhereInput[]
    | Django_admin_logScalarWhereInput;
  updateMany?:
    | Django_admin_logUpdateManyWithWhereNestedInput[]
    | Django_admin_logUpdateManyWithWhereNestedInput;
}

export interface Django_admin_logUpdateWithWhereUniqueWithoutUserInput {
  where: Django_admin_logWhereUniqueInput;
  data: Django_admin_logUpdateWithoutUserDataInput;
}

export interface Django_admin_logUpdateWithoutUserDataInput {
  action_flag?: Int;
  action_time?: DateTimeInput;
  change_message?: String;
  content_type?: Django_content_typeUpdateOneWithoutDjango_admin_logsInput;
  object_id?: String;
  object_repr?: String;
}

export interface Django_content_typeUpdateOneWithoutDjango_admin_logsInput {
  create?: Django_content_typeCreateWithoutDjango_admin_logsInput;
  update?: Django_content_typeUpdateWithoutDjango_admin_logsDataInput;
  upsert?: Django_content_typeUpsertWithoutDjango_admin_logsInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: Django_content_typeWhereUniqueInput;
}

export interface Django_content_typeUpdateWithoutDjango_admin_logsDataInput {
  app_label?: String;
  auth_permissions?: Auth_permissionUpdateManyWithoutContent_typeInput;
  model?: String;
}

export interface Auth_permissionUpdateManyWithoutContent_typeInput {
  create?:
    | Auth_permissionCreateWithoutContent_typeInput[]
    | Auth_permissionCreateWithoutContent_typeInput;
  delete?: Auth_permissionWhereUniqueInput[] | Auth_permissionWhereUniqueInput;
  connect?: Auth_permissionWhereUniqueInput[] | Auth_permissionWhereUniqueInput;
  disconnect?:
    | Auth_permissionWhereUniqueInput[]
    | Auth_permissionWhereUniqueInput;
  update?:
    | Auth_permissionUpdateWithWhereUniqueWithoutContent_typeInput[]
    | Auth_permissionUpdateWithWhereUniqueWithoutContent_typeInput;
  upsert?:
    | Auth_permissionUpsertWithWhereUniqueWithoutContent_typeInput[]
    | Auth_permissionUpsertWithWhereUniqueWithoutContent_typeInput;
  deleteMany?:
    | Auth_permissionScalarWhereInput[]
    | Auth_permissionScalarWhereInput;
  updateMany?:
    | Auth_permissionUpdateManyWithWhereNestedInput[]
    | Auth_permissionUpdateManyWithWhereNestedInput;
}

export interface Auth_permissionUpdateWithWhereUniqueWithoutContent_typeInput {
  where: Auth_permissionWhereUniqueInput;
  data: Auth_permissionUpdateWithoutContent_typeDataInput;
}

export interface Auth_permissionUpdateWithoutContent_typeDataInput {
  auth_group_permissionses?: Auth_group_permissionsUpdateManyWithoutPermissionInput;
  codename?: String;
  name?: String;
}

export interface Auth_group_permissionsUpdateManyWithoutPermissionInput {
  create?:
    | Auth_group_permissionsCreateWithoutPermissionInput[]
    | Auth_group_permissionsCreateWithoutPermissionInput;
  delete?:
    | Auth_group_permissionsWhereUniqueInput[]
    | Auth_group_permissionsWhereUniqueInput;
  connect?:
    | Auth_group_permissionsWhereUniqueInput[]
    | Auth_group_permissionsWhereUniqueInput;
  disconnect?:
    | Auth_group_permissionsWhereUniqueInput[]
    | Auth_group_permissionsWhereUniqueInput;
  update?:
    | Auth_group_permissionsUpdateWithWhereUniqueWithoutPermissionInput[]
    | Auth_group_permissionsUpdateWithWhereUniqueWithoutPermissionInput;
  upsert?:
    | Auth_group_permissionsUpsertWithWhereUniqueWithoutPermissionInput[]
    | Auth_group_permissionsUpsertWithWhereUniqueWithoutPermissionInput;
  deleteMany?:
    | Auth_group_permissionsScalarWhereInput[]
    | Auth_group_permissionsScalarWhereInput;
}

export interface Auth_group_permissionsUpdateWithWhereUniqueWithoutPermissionInput {
  where: Auth_group_permissionsWhereUniqueInput;
  data: Auth_group_permissionsUpdateWithoutPermissionDataInput;
}

export interface Auth_group_permissionsUpdateWithoutPermissionDataInput {
  group?: Auth_groupUpdateOneWithoutAuth_group_permissionsesInput;
}

export interface Auth_groupUpdateOneWithoutAuth_group_permissionsesInput {
  create?: Auth_groupCreateWithoutAuth_group_permissionsesInput;
  update?: Auth_groupUpdateWithoutAuth_group_permissionsesDataInput;
  upsert?: Auth_groupUpsertWithoutAuth_group_permissionsesInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: Auth_groupWhereUniqueInput;
}

export interface Auth_groupUpdateWithoutAuth_group_permissionsesDataInput {
  name?: String;
}

export interface Auth_groupUpsertWithoutAuth_group_permissionsesInput {
  update: Auth_groupUpdateWithoutAuth_group_permissionsesDataInput;
  create: Auth_groupCreateWithoutAuth_group_permissionsesInput;
}

export interface Auth_group_permissionsUpsertWithWhereUniqueWithoutPermissionInput {
  where: Auth_group_permissionsWhereUniqueInput;
  update: Auth_group_permissionsUpdateWithoutPermissionDataInput;
  create: Auth_group_permissionsCreateWithoutPermissionInput;
}

export interface Auth_group_permissionsScalarWhereInput {
  id?: Int;
  id_not?: Int;
  id_in?: Int[] | Int;
  id_not_in?: Int[] | Int;
  id_lt?: Int;
  id_lte?: Int;
  id_gt?: Int;
  id_gte?: Int;
  AND?:
    | Auth_group_permissionsScalarWhereInput[]
    | Auth_group_permissionsScalarWhereInput;
  OR?:
    | Auth_group_permissionsScalarWhereInput[]
    | Auth_group_permissionsScalarWhereInput;
  NOT?:
    | Auth_group_permissionsScalarWhereInput[]
    | Auth_group_permissionsScalarWhereInput;
}

export interface Auth_permissionUpsertWithWhereUniqueWithoutContent_typeInput {
  where: Auth_permissionWhereUniqueInput;
  update: Auth_permissionUpdateWithoutContent_typeDataInput;
  create: Auth_permissionCreateWithoutContent_typeInput;
}

export interface Auth_permissionScalarWhereInput {
  codename?: String;
  codename_not?: String;
  codename_in?: String[] | String;
  codename_not_in?: String[] | String;
  codename_lt?: String;
  codename_lte?: String;
  codename_gt?: String;
  codename_gte?: String;
  codename_contains?: String;
  codename_not_contains?: String;
  codename_starts_with?: String;
  codename_not_starts_with?: String;
  codename_ends_with?: String;
  codename_not_ends_with?: String;
  id?: Int;
  id_not?: Int;
  id_in?: Int[] | Int;
  id_not_in?: Int[] | Int;
  id_lt?: Int;
  id_lte?: Int;
  id_gt?: Int;
  id_gte?: Int;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  AND?: Auth_permissionScalarWhereInput[] | Auth_permissionScalarWhereInput;
  OR?: Auth_permissionScalarWhereInput[] | Auth_permissionScalarWhereInput;
  NOT?: Auth_permissionScalarWhereInput[] | Auth_permissionScalarWhereInput;
}

export interface Auth_permissionUpdateManyWithWhereNestedInput {
  where: Auth_permissionScalarWhereInput;
  data: Auth_permissionUpdateManyDataInput;
}

export interface Auth_permissionUpdateManyDataInput {
  codename?: String;
  name?: String;
}

export interface Django_content_typeUpsertWithoutDjango_admin_logsInput {
  update: Django_content_typeUpdateWithoutDjango_admin_logsDataInput;
  create: Django_content_typeCreateWithoutDjango_admin_logsInput;
}

export interface Django_admin_logUpsertWithWhereUniqueWithoutUserInput {
  where: Django_admin_logWhereUniqueInput;
  update: Django_admin_logUpdateWithoutUserDataInput;
  create: Django_admin_logCreateWithoutUserInput;
}

export interface Django_admin_logScalarWhereInput {
  action_flag?: Int;
  action_flag_not?: Int;
  action_flag_in?: Int[] | Int;
  action_flag_not_in?: Int[] | Int;
  action_flag_lt?: Int;
  action_flag_lte?: Int;
  action_flag_gt?: Int;
  action_flag_gte?: Int;
  action_time?: DateTimeInput;
  action_time_not?: DateTimeInput;
  action_time_in?: DateTimeInput[] | DateTimeInput;
  action_time_not_in?: DateTimeInput[] | DateTimeInput;
  action_time_lt?: DateTimeInput;
  action_time_lte?: DateTimeInput;
  action_time_gt?: DateTimeInput;
  action_time_gte?: DateTimeInput;
  change_message?: String;
  change_message_not?: String;
  change_message_in?: String[] | String;
  change_message_not_in?: String[] | String;
  change_message_lt?: String;
  change_message_lte?: String;
  change_message_gt?: String;
  change_message_gte?: String;
  change_message_contains?: String;
  change_message_not_contains?: String;
  change_message_starts_with?: String;
  change_message_not_starts_with?: String;
  change_message_ends_with?: String;
  change_message_not_ends_with?: String;
  id?: Int;
  id_not?: Int;
  id_in?: Int[] | Int;
  id_not_in?: Int[] | Int;
  id_lt?: Int;
  id_lte?: Int;
  id_gt?: Int;
  id_gte?: Int;
  object_id?: String;
  object_id_not?: String;
  object_id_in?: String[] | String;
  object_id_not_in?: String[] | String;
  object_id_lt?: String;
  object_id_lte?: String;
  object_id_gt?: String;
  object_id_gte?: String;
  object_id_contains?: String;
  object_id_not_contains?: String;
  object_id_starts_with?: String;
  object_id_not_starts_with?: String;
  object_id_ends_with?: String;
  object_id_not_ends_with?: String;
  object_repr?: String;
  object_repr_not?: String;
  object_repr_in?: String[] | String;
  object_repr_not_in?: String[] | String;
  object_repr_lt?: String;
  object_repr_lte?: String;
  object_repr_gt?: String;
  object_repr_gte?: String;
  object_repr_contains?: String;
  object_repr_not_contains?: String;
  object_repr_starts_with?: String;
  object_repr_not_starts_with?: String;
  object_repr_ends_with?: String;
  object_repr_not_ends_with?: String;
  AND?: Django_admin_logScalarWhereInput[] | Django_admin_logScalarWhereInput;
  OR?: Django_admin_logScalarWhereInput[] | Django_admin_logScalarWhereInput;
  NOT?: Django_admin_logScalarWhereInput[] | Django_admin_logScalarWhereInput;
}

export interface Django_admin_logUpdateManyWithWhereNestedInput {
  where: Django_admin_logScalarWhereInput;
  data: Django_admin_logUpdateManyDataInput;
}

export interface Django_admin_logUpdateManyDataInput {
  action_flag?: Int;
  action_time?: DateTimeInput;
  change_message?: String;
  object_id?: String;
  object_repr?: String;
}

export interface Rate_clientUpdateManyWithoutSalesmanInput {
  create?:
    | Rate_clientCreateWithoutSalesmanInput[]
    | Rate_clientCreateWithoutSalesmanInput;
  delete?: Rate_clientWhereUniqueInput[] | Rate_clientWhereUniqueInput;
  connect?: Rate_clientWhereUniqueInput[] | Rate_clientWhereUniqueInput;
  disconnect?: Rate_clientWhereUniqueInput[] | Rate_clientWhereUniqueInput;
  update?:
    | Rate_clientUpdateWithWhereUniqueWithoutSalesmanInput[]
    | Rate_clientUpdateWithWhereUniqueWithoutSalesmanInput;
  upsert?:
    | Rate_clientUpsertWithWhereUniqueWithoutSalesmanInput[]
    | Rate_clientUpsertWithWhereUniqueWithoutSalesmanInput;
  deleteMany?: Rate_clientScalarWhereInput[] | Rate_clientScalarWhereInput;
  updateMany?:
    | Rate_clientUpdateManyWithWhereNestedInput[]
    | Rate_clientUpdateManyWithWhereNestedInput;
}

export interface Rate_clientUpdateWithWhereUniqueWithoutSalesmanInput {
  where: Rate_clientWhereUniqueInput;
  data: Rate_clientUpdateWithoutSalesmanDataInput;
}

export interface Rate_clientUpdateWithoutSalesmanDataInput {
  name?: String;
  rate_rates?: Rate_rateUpdateManyWithoutAccountInput;
  recordedDate?: DateTimeInput;
  remarks?: String;
}

export interface Rate_rateUpdateManyWithoutAccountInput {
  create?:
    | Rate_rateCreateWithoutAccountInput[]
    | Rate_rateCreateWithoutAccountInput;
  delete?: Rate_rateWhereUniqueInput[] | Rate_rateWhereUniqueInput;
  connect?: Rate_rateWhereUniqueInput[] | Rate_rateWhereUniqueInput;
  disconnect?: Rate_rateWhereUniqueInput[] | Rate_rateWhereUniqueInput;
  update?:
    | Rate_rateUpdateWithWhereUniqueWithoutAccountInput[]
    | Rate_rateUpdateWithWhereUniqueWithoutAccountInput;
  upsert?:
    | Rate_rateUpsertWithWhereUniqueWithoutAccountInput[]
    | Rate_rateUpsertWithWhereUniqueWithoutAccountInput;
  deleteMany?: Rate_rateScalarWhereInput[] | Rate_rateScalarWhereInput;
  updateMany?:
    | Rate_rateUpdateManyWithWhereNestedInput[]
    | Rate_rateUpdateManyWithWhereNestedInput;
}

export interface Rate_rateUpdateWithWhereUniqueWithoutAccountInput {
  where: Rate_rateWhereUniqueInput;
  data: Rate_rateUpdateWithoutAccountDataInput;
}

export interface Rate_rateUpdateWithoutAccountDataInput {
  buying20?: Int;
  buying40?: Int;
  buying4H?: Int;
  deleted?: Boolean;
  dischargingFT?: Int;
  effectiveDate?: DateTimeInput;
  inputperson?: Account_myuserUpdateOneWithoutRate_ratesInput;
  liner?: Countrycity_linerUpdateOneWithoutRate_ratesInput;
  loadingFT?: Int;
  offeredDate?: DateTimeInput;
  pod?: Countrycity_locationUpdateOneWithoutRate_rates_podsInput;
  pol?: Countrycity_locationUpdateOneWithoutRate_rates_polsInput;
  recordedDate?: DateTimeInput;
  remark?: String;
  selling20?: Int;
  selling40?: Int;
  selling4H?: Int;
  type?: Rate_cntrtypeUpdateOneWithoutRate_ratesInput;
}

export interface Account_myuserUpdateOneWithoutRate_ratesInput {
  create?: Account_myuserCreateWithoutRate_ratesInput;
  update?: Account_myuserUpdateWithoutRate_ratesDataInput;
  upsert?: Account_myuserUpsertWithoutRate_ratesInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: Account_myuserWhereUniqueInput;
}

export interface Account_myuserUpdateWithoutRate_ratesDataInput {
  account_messageboxes_receivers?: Account_messageboxUpdateManyWithoutReceiverInput;
  account_messageboxes_senders?: Account_messageboxUpdateManyWithoutSenderInput;
  account_myuserprofiles?: Account_myuserprofileUpdateManyWithoutOwnerInput;
  account_ratereaders_readers?: Account_ratereaderUpdateManyWithoutReaderInput;
  account_ratereaders_showers?: Account_ratereaderUpdateManyWithoutShowerInput;
  django_admin_logs?: Django_admin_logUpdateManyWithoutUserInput;
  email?: String;
  is_active?: Boolean;
  is_admin?: Boolean;
  last_login?: DateTimeInput;
  nickname?: String;
  password?: String;
  rate_clients?: Rate_clientUpdateManyWithoutSalesmanInput;
}

export interface Account_myuserUpsertWithoutRate_ratesInput {
  update: Account_myuserUpdateWithoutRate_ratesDataInput;
  create: Account_myuserCreateWithoutRate_ratesInput;
}

export interface Countrycity_linerUpdateOneWithoutRate_ratesInput {
  create?: Countrycity_linerCreateWithoutRate_ratesInput;
  update?: Countrycity_linerUpdateWithoutRate_ratesDataInput;
  upsert?: Countrycity_linerUpsertWithoutRate_ratesInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: Countrycity_linerWhereUniqueInput;
}

export interface Countrycity_linerUpdateWithoutRate_ratesDataInput {
  label?: String;
  name?: String;
}

export interface Countrycity_linerUpsertWithoutRate_ratesInput {
  update: Countrycity_linerUpdateWithoutRate_ratesDataInput;
  create: Countrycity_linerCreateWithoutRate_ratesInput;
}

export interface Countrycity_locationUpdateOneWithoutRate_rates_podsInput {
  create?: Countrycity_locationCreateWithoutRate_rates_podsInput;
  update?: Countrycity_locationUpdateWithoutRate_rates_podsDataInput;
  upsert?: Countrycity_locationUpsertWithoutRate_rates_podsInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: Countrycity_locationWhereUniqueInput;
}

export interface Countrycity_locationUpdateWithoutRate_rates_podsDataInput {
  country?: String;
  label?: String;
  name?: String;
  rate_rates_pols?: Rate_rateUpdateManyWithoutPolInput;
}

export interface Rate_rateUpdateManyWithoutPolInput {
  create?: Rate_rateCreateWithoutPolInput[] | Rate_rateCreateWithoutPolInput;
  delete?: Rate_rateWhereUniqueInput[] | Rate_rateWhereUniqueInput;
  connect?: Rate_rateWhereUniqueInput[] | Rate_rateWhereUniqueInput;
  disconnect?: Rate_rateWhereUniqueInput[] | Rate_rateWhereUniqueInput;
  update?:
    | Rate_rateUpdateWithWhereUniqueWithoutPolInput[]
    | Rate_rateUpdateWithWhereUniqueWithoutPolInput;
  upsert?:
    | Rate_rateUpsertWithWhereUniqueWithoutPolInput[]
    | Rate_rateUpsertWithWhereUniqueWithoutPolInput;
  deleteMany?: Rate_rateScalarWhereInput[] | Rate_rateScalarWhereInput;
  updateMany?:
    | Rate_rateUpdateManyWithWhereNestedInput[]
    | Rate_rateUpdateManyWithWhereNestedInput;
}

export interface Rate_rateUpdateWithWhereUniqueWithoutPolInput {
  where: Rate_rateWhereUniqueInput;
  data: Rate_rateUpdateWithoutPolDataInput;
}

export interface Rate_rateUpdateWithoutPolDataInput {
  account?: Rate_clientUpdateOneWithoutRate_ratesInput;
  buying20?: Int;
  buying40?: Int;
  buying4H?: Int;
  deleted?: Boolean;
  dischargingFT?: Int;
  effectiveDate?: DateTimeInput;
  inputperson?: Account_myuserUpdateOneWithoutRate_ratesInput;
  liner?: Countrycity_linerUpdateOneWithoutRate_ratesInput;
  loadingFT?: Int;
  offeredDate?: DateTimeInput;
  pod?: Countrycity_locationUpdateOneWithoutRate_rates_podsInput;
  recordedDate?: DateTimeInput;
  remark?: String;
  selling20?: Int;
  selling40?: Int;
  selling4H?: Int;
  type?: Rate_cntrtypeUpdateOneWithoutRate_ratesInput;
}

export interface Rate_clientUpdateOneWithoutRate_ratesInput {
  create?: Rate_clientCreateWithoutRate_ratesInput;
  update?: Rate_clientUpdateWithoutRate_ratesDataInput;
  upsert?: Rate_clientUpsertWithoutRate_ratesInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: Rate_clientWhereUniqueInput;
}

export interface Rate_clientUpdateWithoutRate_ratesDataInput {
  name?: String;
  recordedDate?: DateTimeInput;
  remarks?: String;
  salesman?: Account_myuserUpdateOneWithoutRate_clientsInput;
}

export interface Account_myuserUpdateOneWithoutRate_clientsInput {
  create?: Account_myuserCreateWithoutRate_clientsInput;
  update?: Account_myuserUpdateWithoutRate_clientsDataInput;
  upsert?: Account_myuserUpsertWithoutRate_clientsInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: Account_myuserWhereUniqueInput;
}

export interface Account_myuserUpdateWithoutRate_clientsDataInput {
  account_messageboxes_receivers?: Account_messageboxUpdateManyWithoutReceiverInput;
  account_messageboxes_senders?: Account_messageboxUpdateManyWithoutSenderInput;
  account_myuserprofiles?: Account_myuserprofileUpdateManyWithoutOwnerInput;
  account_ratereaders_readers?: Account_ratereaderUpdateManyWithoutReaderInput;
  account_ratereaders_showers?: Account_ratereaderUpdateManyWithoutShowerInput;
  django_admin_logs?: Django_admin_logUpdateManyWithoutUserInput;
  email?: String;
  is_active?: Boolean;
  is_admin?: Boolean;
  last_login?: DateTimeInput;
  nickname?: String;
  password?: String;
  rate_rates?: Rate_rateUpdateManyWithoutInputpersonInput;
}

export interface Rate_rateUpdateManyWithoutInputpersonInput {
  create?:
    | Rate_rateCreateWithoutInputpersonInput[]
    | Rate_rateCreateWithoutInputpersonInput;
  delete?: Rate_rateWhereUniqueInput[] | Rate_rateWhereUniqueInput;
  connect?: Rate_rateWhereUniqueInput[] | Rate_rateWhereUniqueInput;
  disconnect?: Rate_rateWhereUniqueInput[] | Rate_rateWhereUniqueInput;
  update?:
    | Rate_rateUpdateWithWhereUniqueWithoutInputpersonInput[]
    | Rate_rateUpdateWithWhereUniqueWithoutInputpersonInput;
  upsert?:
    | Rate_rateUpsertWithWhereUniqueWithoutInputpersonInput[]
    | Rate_rateUpsertWithWhereUniqueWithoutInputpersonInput;
  deleteMany?: Rate_rateScalarWhereInput[] | Rate_rateScalarWhereInput;
  updateMany?:
    | Rate_rateUpdateManyWithWhereNestedInput[]
    | Rate_rateUpdateManyWithWhereNestedInput;
}

export interface Rate_rateUpdateWithWhereUniqueWithoutInputpersonInput {
  where: Rate_rateWhereUniqueInput;
  data: Rate_rateUpdateWithoutInputpersonDataInput;
}

export interface Rate_rateUpdateWithoutInputpersonDataInput {
  account?: Rate_clientUpdateOneWithoutRate_ratesInput;
  buying20?: Int;
  buying40?: Int;
  buying4H?: Int;
  deleted?: Boolean;
  dischargingFT?: Int;
  effectiveDate?: DateTimeInput;
  liner?: Countrycity_linerUpdateOneWithoutRate_ratesInput;
  loadingFT?: Int;
  offeredDate?: DateTimeInput;
  pod?: Countrycity_locationUpdateOneWithoutRate_rates_podsInput;
  pol?: Countrycity_locationUpdateOneWithoutRate_rates_polsInput;
  recordedDate?: DateTimeInput;
  remark?: String;
  selling20?: Int;
  selling40?: Int;
  selling4H?: Int;
  type?: Rate_cntrtypeUpdateOneWithoutRate_ratesInput;
}

export interface Countrycity_locationUpdateOneWithoutRate_rates_polsInput {
  create?: Countrycity_locationCreateWithoutRate_rates_polsInput;
  update?: Countrycity_locationUpdateWithoutRate_rates_polsDataInput;
  upsert?: Countrycity_locationUpsertWithoutRate_rates_polsInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: Countrycity_locationWhereUniqueInput;
}

export interface Countrycity_locationUpdateWithoutRate_rates_polsDataInput {
  country?: String;
  label?: String;
  name?: String;
  rate_rates_pods?: Rate_rateUpdateManyWithoutPodInput;
}

export interface Rate_rateUpdateManyWithoutPodInput {
  create?: Rate_rateCreateWithoutPodInput[] | Rate_rateCreateWithoutPodInput;
  delete?: Rate_rateWhereUniqueInput[] | Rate_rateWhereUniqueInput;
  connect?: Rate_rateWhereUniqueInput[] | Rate_rateWhereUniqueInput;
  disconnect?: Rate_rateWhereUniqueInput[] | Rate_rateWhereUniqueInput;
  update?:
    | Rate_rateUpdateWithWhereUniqueWithoutPodInput[]
    | Rate_rateUpdateWithWhereUniqueWithoutPodInput;
  upsert?:
    | Rate_rateUpsertWithWhereUniqueWithoutPodInput[]
    | Rate_rateUpsertWithWhereUniqueWithoutPodInput;
  deleteMany?: Rate_rateScalarWhereInput[] | Rate_rateScalarWhereInput;
  updateMany?:
    | Rate_rateUpdateManyWithWhereNestedInput[]
    | Rate_rateUpdateManyWithWhereNestedInput;
}

export interface Rate_rateUpdateWithWhereUniqueWithoutPodInput {
  where: Rate_rateWhereUniqueInput;
  data: Rate_rateUpdateWithoutPodDataInput;
}

export interface Rate_rateUpdateWithoutPodDataInput {
  account?: Rate_clientUpdateOneWithoutRate_ratesInput;
  buying20?: Int;
  buying40?: Int;
  buying4H?: Int;
  deleted?: Boolean;
  dischargingFT?: Int;
  effectiveDate?: DateTimeInput;
  inputperson?: Account_myuserUpdateOneWithoutRate_ratesInput;
  liner?: Countrycity_linerUpdateOneWithoutRate_ratesInput;
  loadingFT?: Int;
  offeredDate?: DateTimeInput;
  pol?: Countrycity_locationUpdateOneWithoutRate_rates_polsInput;
  recordedDate?: DateTimeInput;
  remark?: String;
  selling20?: Int;
  selling40?: Int;
  selling4H?: Int;
  type?: Rate_cntrtypeUpdateOneWithoutRate_ratesInput;
}

export interface Rate_cntrtypeUpdateOneWithoutRate_ratesInput {
  create?: Rate_cntrtypeCreateWithoutRate_ratesInput;
  update?: Rate_cntrtypeUpdateWithoutRate_ratesDataInput;
  upsert?: Rate_cntrtypeUpsertWithoutRate_ratesInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: Rate_cntrtypeWhereUniqueInput;
}

export interface Rate_cntrtypeUpdateWithoutRate_ratesDataInput {
  name?: String;
}

export interface Rate_cntrtypeUpsertWithoutRate_ratesInput {
  update: Rate_cntrtypeUpdateWithoutRate_ratesDataInput;
  create: Rate_cntrtypeCreateWithoutRate_ratesInput;
}

export interface Rate_rateUpsertWithWhereUniqueWithoutPodInput {
  where: Rate_rateWhereUniqueInput;
  update: Rate_rateUpdateWithoutPodDataInput;
  create: Rate_rateCreateWithoutPodInput;
}

export interface Rate_rateScalarWhereInput {
  buying20?: Int;
  buying20_not?: Int;
  buying20_in?: Int[] | Int;
  buying20_not_in?: Int[] | Int;
  buying20_lt?: Int;
  buying20_lte?: Int;
  buying20_gt?: Int;
  buying20_gte?: Int;
  buying40?: Int;
  buying40_not?: Int;
  buying40_in?: Int[] | Int;
  buying40_not_in?: Int[] | Int;
  buying40_lt?: Int;
  buying40_lte?: Int;
  buying40_gt?: Int;
  buying40_gte?: Int;
  buying4H?: Int;
  buying4H_not?: Int;
  buying4H_in?: Int[] | Int;
  buying4H_not_in?: Int[] | Int;
  buying4H_lt?: Int;
  buying4H_lte?: Int;
  buying4H_gt?: Int;
  buying4H_gte?: Int;
  deleted?: Boolean;
  deleted_not?: Boolean;
  dischargingFT?: Int;
  dischargingFT_not?: Int;
  dischargingFT_in?: Int[] | Int;
  dischargingFT_not_in?: Int[] | Int;
  dischargingFT_lt?: Int;
  dischargingFT_lte?: Int;
  dischargingFT_gt?: Int;
  dischargingFT_gte?: Int;
  effectiveDate?: DateTimeInput;
  effectiveDate_not?: DateTimeInput;
  effectiveDate_in?: DateTimeInput[] | DateTimeInput;
  effectiveDate_not_in?: DateTimeInput[] | DateTimeInput;
  effectiveDate_lt?: DateTimeInput;
  effectiveDate_lte?: DateTimeInput;
  effectiveDate_gt?: DateTimeInput;
  effectiveDate_gte?: DateTimeInput;
  id?: Int;
  id_not?: Int;
  id_in?: Int[] | Int;
  id_not_in?: Int[] | Int;
  id_lt?: Int;
  id_lte?: Int;
  id_gt?: Int;
  id_gte?: Int;
  loadingFT?: Int;
  loadingFT_not?: Int;
  loadingFT_in?: Int[] | Int;
  loadingFT_not_in?: Int[] | Int;
  loadingFT_lt?: Int;
  loadingFT_lte?: Int;
  loadingFT_gt?: Int;
  loadingFT_gte?: Int;
  offeredDate?: DateTimeInput;
  offeredDate_not?: DateTimeInput;
  offeredDate_in?: DateTimeInput[] | DateTimeInput;
  offeredDate_not_in?: DateTimeInput[] | DateTimeInput;
  offeredDate_lt?: DateTimeInput;
  offeredDate_lte?: DateTimeInput;
  offeredDate_gt?: DateTimeInput;
  offeredDate_gte?: DateTimeInput;
  recordedDate?: DateTimeInput;
  recordedDate_not?: DateTimeInput;
  recordedDate_in?: DateTimeInput[] | DateTimeInput;
  recordedDate_not_in?: DateTimeInput[] | DateTimeInput;
  recordedDate_lt?: DateTimeInput;
  recordedDate_lte?: DateTimeInput;
  recordedDate_gt?: DateTimeInput;
  recordedDate_gte?: DateTimeInput;
  remark?: String;
  remark_not?: String;
  remark_in?: String[] | String;
  remark_not_in?: String[] | String;
  remark_lt?: String;
  remark_lte?: String;
  remark_gt?: String;
  remark_gte?: String;
  remark_contains?: String;
  remark_not_contains?: String;
  remark_starts_with?: String;
  remark_not_starts_with?: String;
  remark_ends_with?: String;
  remark_not_ends_with?: String;
  selling20?: Int;
  selling20_not?: Int;
  selling20_in?: Int[] | Int;
  selling20_not_in?: Int[] | Int;
  selling20_lt?: Int;
  selling20_lte?: Int;
  selling20_gt?: Int;
  selling20_gte?: Int;
  selling40?: Int;
  selling40_not?: Int;
  selling40_in?: Int[] | Int;
  selling40_not_in?: Int[] | Int;
  selling40_lt?: Int;
  selling40_lte?: Int;
  selling40_gt?: Int;
  selling40_gte?: Int;
  selling4H?: Int;
  selling4H_not?: Int;
  selling4H_in?: Int[] | Int;
  selling4H_not_in?: Int[] | Int;
  selling4H_lt?: Int;
  selling4H_lte?: Int;
  selling4H_gt?: Int;
  selling4H_gte?: Int;
  AND?: Rate_rateScalarWhereInput[] | Rate_rateScalarWhereInput;
  OR?: Rate_rateScalarWhereInput[] | Rate_rateScalarWhereInput;
  NOT?: Rate_rateScalarWhereInput[] | Rate_rateScalarWhereInput;
}

export interface Rate_rateUpdateManyWithWhereNestedInput {
  where: Rate_rateScalarWhereInput;
  data: Rate_rateUpdateManyDataInput;
}

export interface Rate_rateUpdateManyDataInput {
  buying20?: Int;
  buying40?: Int;
  buying4H?: Int;
  deleted?: Boolean;
  dischargingFT?: Int;
  effectiveDate?: DateTimeInput;
  loadingFT?: Int;
  offeredDate?: DateTimeInput;
  recordedDate?: DateTimeInput;
  remark?: String;
  selling20?: Int;
  selling40?: Int;
  selling4H?: Int;
}

export interface Countrycity_locationUpsertWithoutRate_rates_polsInput {
  update: Countrycity_locationUpdateWithoutRate_rates_polsDataInput;
  create: Countrycity_locationCreateWithoutRate_rates_polsInput;
}

export interface Rate_rateUpsertWithWhereUniqueWithoutInputpersonInput {
  where: Rate_rateWhereUniqueInput;
  update: Rate_rateUpdateWithoutInputpersonDataInput;
  create: Rate_rateCreateWithoutInputpersonInput;
}

export interface Account_myuserUpsertWithoutRate_clientsInput {
  update: Account_myuserUpdateWithoutRate_clientsDataInput;
  create: Account_myuserCreateWithoutRate_clientsInput;
}

export interface Rate_clientUpsertWithoutRate_ratesInput {
  update: Rate_clientUpdateWithoutRate_ratesDataInput;
  create: Rate_clientCreateWithoutRate_ratesInput;
}

export interface Rate_rateUpsertWithWhereUniqueWithoutPolInput {
  where: Rate_rateWhereUniqueInput;
  update: Rate_rateUpdateWithoutPolDataInput;
  create: Rate_rateCreateWithoutPolInput;
}

export interface Countrycity_locationUpsertWithoutRate_rates_podsInput {
  update: Countrycity_locationUpdateWithoutRate_rates_podsDataInput;
  create: Countrycity_locationCreateWithoutRate_rates_podsInput;
}

export interface Rate_rateUpsertWithWhereUniqueWithoutAccountInput {
  where: Rate_rateWhereUniqueInput;
  update: Rate_rateUpdateWithoutAccountDataInput;
  create: Rate_rateCreateWithoutAccountInput;
}

export interface Rate_clientUpsertWithWhereUniqueWithoutSalesmanInput {
  where: Rate_clientWhereUniqueInput;
  update: Rate_clientUpdateWithoutSalesmanDataInput;
  create: Rate_clientCreateWithoutSalesmanInput;
}

export interface Rate_clientScalarWhereInput {
  id?: Int;
  id_not?: Int;
  id_in?: Int[] | Int;
  id_not_in?: Int[] | Int;
  id_lt?: Int;
  id_lte?: Int;
  id_gt?: Int;
  id_gte?: Int;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  recordedDate?: DateTimeInput;
  recordedDate_not?: DateTimeInput;
  recordedDate_in?: DateTimeInput[] | DateTimeInput;
  recordedDate_not_in?: DateTimeInput[] | DateTimeInput;
  recordedDate_lt?: DateTimeInput;
  recordedDate_lte?: DateTimeInput;
  recordedDate_gt?: DateTimeInput;
  recordedDate_gte?: DateTimeInput;
  remarks?: String;
  remarks_not?: String;
  remarks_in?: String[] | String;
  remarks_not_in?: String[] | String;
  remarks_lt?: String;
  remarks_lte?: String;
  remarks_gt?: String;
  remarks_gte?: String;
  remarks_contains?: String;
  remarks_not_contains?: String;
  remarks_starts_with?: String;
  remarks_not_starts_with?: String;
  remarks_ends_with?: String;
  remarks_not_ends_with?: String;
  AND?: Rate_clientScalarWhereInput[] | Rate_clientScalarWhereInput;
  OR?: Rate_clientScalarWhereInput[] | Rate_clientScalarWhereInput;
  NOT?: Rate_clientScalarWhereInput[] | Rate_clientScalarWhereInput;
}

export interface Rate_clientUpdateManyWithWhereNestedInput {
  where: Rate_clientScalarWhereInput;
  data: Rate_clientUpdateManyDataInput;
}

export interface Rate_clientUpdateManyDataInput {
  name?: String;
  recordedDate?: DateTimeInput;
  remarks?: String;
}

export interface Account_myuserUpsertWithoutAccount_ratereaders_readersInput {
  update: Account_myuserUpdateWithoutAccount_ratereaders_readersDataInput;
  create: Account_myuserCreateWithoutAccount_ratereaders_readersInput;
}

export interface Account_ratereaderUpsertWithWhereUniqueWithoutShowerInput {
  where: Account_ratereaderWhereUniqueInput;
  update: Account_ratereaderUpdateWithoutShowerDataInput;
  create: Account_ratereaderCreateWithoutShowerInput;
}

export interface Account_ratereaderScalarWhereInput {
  id?: Int;
  id_not?: Int;
  id_in?: Int[] | Int;
  id_not_in?: Int[] | Int;
  id_lt?: Int;
  id_lte?: Int;
  id_gt?: Int;
  id_gte?: Int;
  relationship_date?: DateTimeInput;
  relationship_date_not?: DateTimeInput;
  relationship_date_in?: DateTimeInput[] | DateTimeInput;
  relationship_date_not_in?: DateTimeInput[] | DateTimeInput;
  relationship_date_lt?: DateTimeInput;
  relationship_date_lte?: DateTimeInput;
  relationship_date_gt?: DateTimeInput;
  relationship_date_gte?: DateTimeInput;
  AND?:
    | Account_ratereaderScalarWhereInput[]
    | Account_ratereaderScalarWhereInput;
  OR?:
    | Account_ratereaderScalarWhereInput[]
    | Account_ratereaderScalarWhereInput;
  NOT?:
    | Account_ratereaderScalarWhereInput[]
    | Account_ratereaderScalarWhereInput;
}

export interface Account_ratereaderUpdateManyWithWhereNestedInput {
  where: Account_ratereaderScalarWhereInput;
  data: Account_ratereaderUpdateManyDataInput;
}

export interface Account_ratereaderUpdateManyDataInput {
  relationship_date?: DateTimeInput;
}

export interface Account_myuserUpsertWithoutAccount_messageboxes_sendersInput {
  update: Account_myuserUpdateWithoutAccount_messageboxes_sendersDataInput;
  create: Account_myuserCreateWithoutAccount_messageboxes_sendersInput;
}

export interface Account_messageboxUpsertWithWhereUniqueWithoutReceiverInput {
  where: Account_messageboxWhereUniqueInput;
  update: Account_messageboxUpdateWithoutReceiverDataInput;
  create: Account_messageboxCreateWithoutReceiverInput;
}

export interface Account_myuserUpsertWithoutAccount_ratereaders_showersInput {
  update: Account_myuserUpdateWithoutAccount_ratereaders_showersDataInput;
  create: Account_myuserCreateWithoutAccount_ratereaders_showersInput;
}

export interface Account_ratereaderUpsertWithWhereUniqueWithoutReaderInput {
  where: Account_ratereaderWhereUniqueInput;
  update: Account_ratereaderUpdateWithoutReaderDataInput;
  create: Account_ratereaderCreateWithoutReaderInput;
}

export interface Account_myuserUpsertWithoutAccount_messageboxes_receiversInput {
  update: Account_myuserUpdateWithoutAccount_messageboxes_receiversDataInput;
  create: Account_myuserCreateWithoutAccount_messageboxes_receiversInput;
}

export interface Account_messageboxUpdateManyMutationInput {
  msg?: String;
  time?: DateTimeInput;
}

export interface Account_myuserCreateInput {
  account_messageboxes_receivers?: Account_messageboxCreateManyWithoutReceiverInput;
  account_messageboxes_senders?: Account_messageboxCreateManyWithoutSenderInput;
  account_myuserprofiles?: Account_myuserprofileCreateManyWithoutOwnerInput;
  account_ratereaders_readers?: Account_ratereaderCreateManyWithoutReaderInput;
  account_ratereaders_showers?: Account_ratereaderCreateManyWithoutShowerInput;
  django_admin_logs?: Django_admin_logCreateManyWithoutUserInput;
  email: String;
  is_active: Boolean;
  is_admin: Boolean;
  last_login?: DateTimeInput;
  nickname: String;
  password: String;
  rate_clients?: Rate_clientCreateManyWithoutSalesmanInput;
  rate_rates?: Rate_rateCreateManyWithoutInputpersonInput;
}

export interface Account_myuserUpdateInput {
  account_messageboxes_receivers?: Account_messageboxUpdateManyWithoutReceiverInput;
  account_messageboxes_senders?: Account_messageboxUpdateManyWithoutSenderInput;
  account_myuserprofiles?: Account_myuserprofileUpdateManyWithoutOwnerInput;
  account_ratereaders_readers?: Account_ratereaderUpdateManyWithoutReaderInput;
  account_ratereaders_showers?: Account_ratereaderUpdateManyWithoutShowerInput;
  django_admin_logs?: Django_admin_logUpdateManyWithoutUserInput;
  email?: String;
  is_active?: Boolean;
  is_admin?: Boolean;
  last_login?: DateTimeInput;
  nickname?: String;
  password?: String;
  rate_clients?: Rate_clientUpdateManyWithoutSalesmanInput;
  rate_rates?: Rate_rateUpdateManyWithoutInputpersonInput;
}

export interface Account_myuserUpdateManyMutationInput {
  email?: String;
  is_active?: Boolean;
  is_admin?: Boolean;
  last_login?: DateTimeInput;
  nickname?: String;
  password?: String;
}

export interface Account_myuserprofileCreateInput {
  company: String;
  image: String;
  job_boolean: String;
  owner?: Account_myuserCreateOneWithoutAccount_myuserprofilesInput;
  profile_name: String;
}

export interface Account_myuserCreateOneWithoutAccount_myuserprofilesInput {
  create?: Account_myuserCreateWithoutAccount_myuserprofilesInput;
  connect?: Account_myuserWhereUniqueInput;
}

export interface Account_myuserCreateWithoutAccount_myuserprofilesInput {
  account_messageboxes_receivers?: Account_messageboxCreateManyWithoutReceiverInput;
  account_messageboxes_senders?: Account_messageboxCreateManyWithoutSenderInput;
  account_ratereaders_readers?: Account_ratereaderCreateManyWithoutReaderInput;
  account_ratereaders_showers?: Account_ratereaderCreateManyWithoutShowerInput;
  django_admin_logs?: Django_admin_logCreateManyWithoutUserInput;
  email: String;
  is_active: Boolean;
  is_admin: Boolean;
  last_login?: DateTimeInput;
  nickname: String;
  password: String;
  rate_clients?: Rate_clientCreateManyWithoutSalesmanInput;
  rate_rates?: Rate_rateCreateManyWithoutInputpersonInput;
}

export interface Account_myuserprofileUpdateInput {
  company?: String;
  image?: String;
  job_boolean?: String;
  owner?: Account_myuserUpdateOneWithoutAccount_myuserprofilesInput;
  profile_name?: String;
}

export interface Account_myuserUpdateOneWithoutAccount_myuserprofilesInput {
  create?: Account_myuserCreateWithoutAccount_myuserprofilesInput;
  update?: Account_myuserUpdateWithoutAccount_myuserprofilesDataInput;
  upsert?: Account_myuserUpsertWithoutAccount_myuserprofilesInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: Account_myuserWhereUniqueInput;
}

export interface Account_myuserUpdateWithoutAccount_myuserprofilesDataInput {
  account_messageboxes_receivers?: Account_messageboxUpdateManyWithoutReceiverInput;
  account_messageboxes_senders?: Account_messageboxUpdateManyWithoutSenderInput;
  account_ratereaders_readers?: Account_ratereaderUpdateManyWithoutReaderInput;
  account_ratereaders_showers?: Account_ratereaderUpdateManyWithoutShowerInput;
  django_admin_logs?: Django_admin_logUpdateManyWithoutUserInput;
  email?: String;
  is_active?: Boolean;
  is_admin?: Boolean;
  last_login?: DateTimeInput;
  nickname?: String;
  password?: String;
  rate_clients?: Rate_clientUpdateManyWithoutSalesmanInput;
  rate_rates?: Rate_rateUpdateManyWithoutInputpersonInput;
}

export interface Account_myuserUpsertWithoutAccount_myuserprofilesInput {
  update: Account_myuserUpdateWithoutAccount_myuserprofilesDataInput;
  create: Account_myuserCreateWithoutAccount_myuserprofilesInput;
}

export interface Account_myuserprofileUpdateManyMutationInput {
  company?: String;
  image?: String;
  job_boolean?: String;
  profile_name?: String;
}

export interface Account_ratereaderCreateInput {
  reader?: Account_myuserCreateOneWithoutAccount_ratereaders_readersInput;
  relationship_date: DateTimeInput;
  shower?: Account_myuserCreateOneWithoutAccount_ratereaders_showersInput;
}

export interface Account_ratereaderUpdateInput {
  reader?: Account_myuserUpdateOneWithoutAccount_ratereaders_readersInput;
  relationship_date?: DateTimeInput;
  shower?: Account_myuserUpdateOneWithoutAccount_ratereaders_showersInput;
}

export interface Account_ratereaderUpdateManyMutationInput {
  relationship_date?: DateTimeInput;
}

export interface Auth_groupCreateInput {
  auth_group_permissionses?: Auth_group_permissionsCreateManyWithoutGroupInput;
  name: String;
}

export interface Auth_group_permissionsCreateManyWithoutGroupInput {
  create?:
    | Auth_group_permissionsCreateWithoutGroupInput[]
    | Auth_group_permissionsCreateWithoutGroupInput;
  connect?:
    | Auth_group_permissionsWhereUniqueInput[]
    | Auth_group_permissionsWhereUniqueInput;
}

export interface Auth_group_permissionsCreateWithoutGroupInput {
  permission?: Auth_permissionCreateOneWithoutAuth_group_permissionsesInput;
}

export interface Auth_permissionCreateOneWithoutAuth_group_permissionsesInput {
  create?: Auth_permissionCreateWithoutAuth_group_permissionsesInput;
  connect?: Auth_permissionWhereUniqueInput;
}

export interface Auth_permissionCreateWithoutAuth_group_permissionsesInput {
  codename: String;
  content_type?: Django_content_typeCreateOneWithoutAuth_permissionsInput;
  name: String;
}

export interface Django_content_typeCreateOneWithoutAuth_permissionsInput {
  create?: Django_content_typeCreateWithoutAuth_permissionsInput;
  connect?: Django_content_typeWhereUniqueInput;
}

export interface Django_content_typeCreateWithoutAuth_permissionsInput {
  app_label: String;
  django_admin_logs?: Django_admin_logCreateManyWithoutContent_typeInput;
  model: String;
}

export interface Django_admin_logCreateManyWithoutContent_typeInput {
  create?:
    | Django_admin_logCreateWithoutContent_typeInput[]
    | Django_admin_logCreateWithoutContent_typeInput;
  connect?:
    | Django_admin_logWhereUniqueInput[]
    | Django_admin_logWhereUniqueInput;
}

export interface Django_admin_logCreateWithoutContent_typeInput {
  action_flag: Int;
  action_time: DateTimeInput;
  change_message: String;
  object_id?: String;
  object_repr: String;
  user?: Account_myuserCreateOneWithoutDjango_admin_logsInput;
}

export interface Account_myuserCreateOneWithoutDjango_admin_logsInput {
  create?: Account_myuserCreateWithoutDjango_admin_logsInput;
  connect?: Account_myuserWhereUniqueInput;
}

export interface Account_myuserCreateWithoutDjango_admin_logsInput {
  account_messageboxes_receivers?: Account_messageboxCreateManyWithoutReceiverInput;
  account_messageboxes_senders?: Account_messageboxCreateManyWithoutSenderInput;
  account_myuserprofiles?: Account_myuserprofileCreateManyWithoutOwnerInput;
  account_ratereaders_readers?: Account_ratereaderCreateManyWithoutReaderInput;
  account_ratereaders_showers?: Account_ratereaderCreateManyWithoutShowerInput;
  email: String;
  is_active: Boolean;
  is_admin: Boolean;
  last_login?: DateTimeInput;
  nickname: String;
  password: String;
  rate_clients?: Rate_clientCreateManyWithoutSalesmanInput;
  rate_rates?: Rate_rateCreateManyWithoutInputpersonInput;
}

export interface Auth_groupUpdateInput {
  auth_group_permissionses?: Auth_group_permissionsUpdateManyWithoutGroupInput;
  name?: String;
}

export interface Auth_group_permissionsUpdateManyWithoutGroupInput {
  create?:
    | Auth_group_permissionsCreateWithoutGroupInput[]
    | Auth_group_permissionsCreateWithoutGroupInput;
  delete?:
    | Auth_group_permissionsWhereUniqueInput[]
    | Auth_group_permissionsWhereUniqueInput;
  connect?:
    | Auth_group_permissionsWhereUniqueInput[]
    | Auth_group_permissionsWhereUniqueInput;
  disconnect?:
    | Auth_group_permissionsWhereUniqueInput[]
    | Auth_group_permissionsWhereUniqueInput;
  update?:
    | Auth_group_permissionsUpdateWithWhereUniqueWithoutGroupInput[]
    | Auth_group_permissionsUpdateWithWhereUniqueWithoutGroupInput;
  upsert?:
    | Auth_group_permissionsUpsertWithWhereUniqueWithoutGroupInput[]
    | Auth_group_permissionsUpsertWithWhereUniqueWithoutGroupInput;
  deleteMany?:
    | Auth_group_permissionsScalarWhereInput[]
    | Auth_group_permissionsScalarWhereInput;
}

export interface Auth_group_permissionsUpdateWithWhereUniqueWithoutGroupInput {
  where: Auth_group_permissionsWhereUniqueInput;
  data: Auth_group_permissionsUpdateWithoutGroupDataInput;
}

export interface Auth_group_permissionsUpdateWithoutGroupDataInput {
  permission?: Auth_permissionUpdateOneWithoutAuth_group_permissionsesInput;
}

export interface Auth_permissionUpdateOneWithoutAuth_group_permissionsesInput {
  create?: Auth_permissionCreateWithoutAuth_group_permissionsesInput;
  update?: Auth_permissionUpdateWithoutAuth_group_permissionsesDataInput;
  upsert?: Auth_permissionUpsertWithoutAuth_group_permissionsesInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: Auth_permissionWhereUniqueInput;
}

export interface Auth_permissionUpdateWithoutAuth_group_permissionsesDataInput {
  codename?: String;
  content_type?: Django_content_typeUpdateOneWithoutAuth_permissionsInput;
  name?: String;
}

export interface Django_content_typeUpdateOneWithoutAuth_permissionsInput {
  create?: Django_content_typeCreateWithoutAuth_permissionsInput;
  update?: Django_content_typeUpdateWithoutAuth_permissionsDataInput;
  upsert?: Django_content_typeUpsertWithoutAuth_permissionsInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: Django_content_typeWhereUniqueInput;
}

export interface Django_content_typeUpdateWithoutAuth_permissionsDataInput {
  app_label?: String;
  django_admin_logs?: Django_admin_logUpdateManyWithoutContent_typeInput;
  model?: String;
}

export interface Django_admin_logUpdateManyWithoutContent_typeInput {
  create?:
    | Django_admin_logCreateWithoutContent_typeInput[]
    | Django_admin_logCreateWithoutContent_typeInput;
  delete?:
    | Django_admin_logWhereUniqueInput[]
    | Django_admin_logWhereUniqueInput;
  connect?:
    | Django_admin_logWhereUniqueInput[]
    | Django_admin_logWhereUniqueInput;
  disconnect?:
    | Django_admin_logWhereUniqueInput[]
    | Django_admin_logWhereUniqueInput;
  update?:
    | Django_admin_logUpdateWithWhereUniqueWithoutContent_typeInput[]
    | Django_admin_logUpdateWithWhereUniqueWithoutContent_typeInput;
  upsert?:
    | Django_admin_logUpsertWithWhereUniqueWithoutContent_typeInput[]
    | Django_admin_logUpsertWithWhereUniqueWithoutContent_typeInput;
  deleteMany?:
    | Django_admin_logScalarWhereInput[]
    | Django_admin_logScalarWhereInput;
  updateMany?:
    | Django_admin_logUpdateManyWithWhereNestedInput[]
    | Django_admin_logUpdateManyWithWhereNestedInput;
}

export interface Django_admin_logUpdateWithWhereUniqueWithoutContent_typeInput {
  where: Django_admin_logWhereUniqueInput;
  data: Django_admin_logUpdateWithoutContent_typeDataInput;
}

export interface Django_admin_logUpdateWithoutContent_typeDataInput {
  action_flag?: Int;
  action_time?: DateTimeInput;
  change_message?: String;
  object_id?: String;
  object_repr?: String;
  user?: Account_myuserUpdateOneWithoutDjango_admin_logsInput;
}

export interface Account_myuserUpdateOneWithoutDjango_admin_logsInput {
  create?: Account_myuserCreateWithoutDjango_admin_logsInput;
  update?: Account_myuserUpdateWithoutDjango_admin_logsDataInput;
  upsert?: Account_myuserUpsertWithoutDjango_admin_logsInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: Account_myuserWhereUniqueInput;
}

export interface Account_myuserUpdateWithoutDjango_admin_logsDataInput {
  account_messageboxes_receivers?: Account_messageboxUpdateManyWithoutReceiverInput;
  account_messageboxes_senders?: Account_messageboxUpdateManyWithoutSenderInput;
  account_myuserprofiles?: Account_myuserprofileUpdateManyWithoutOwnerInput;
  account_ratereaders_readers?: Account_ratereaderUpdateManyWithoutReaderInput;
  account_ratereaders_showers?: Account_ratereaderUpdateManyWithoutShowerInput;
  email?: String;
  is_active?: Boolean;
  is_admin?: Boolean;
  last_login?: DateTimeInput;
  nickname?: String;
  password?: String;
  rate_clients?: Rate_clientUpdateManyWithoutSalesmanInput;
  rate_rates?: Rate_rateUpdateManyWithoutInputpersonInput;
}

export interface Account_myuserUpsertWithoutDjango_admin_logsInput {
  update: Account_myuserUpdateWithoutDjango_admin_logsDataInput;
  create: Account_myuserCreateWithoutDjango_admin_logsInput;
}

export interface Django_admin_logUpsertWithWhereUniqueWithoutContent_typeInput {
  where: Django_admin_logWhereUniqueInput;
  update: Django_admin_logUpdateWithoutContent_typeDataInput;
  create: Django_admin_logCreateWithoutContent_typeInput;
}

export interface Django_content_typeUpsertWithoutAuth_permissionsInput {
  update: Django_content_typeUpdateWithoutAuth_permissionsDataInput;
  create: Django_content_typeCreateWithoutAuth_permissionsInput;
}

export interface Auth_permissionUpsertWithoutAuth_group_permissionsesInput {
  update: Auth_permissionUpdateWithoutAuth_group_permissionsesDataInput;
  create: Auth_permissionCreateWithoutAuth_group_permissionsesInput;
}

export interface Auth_group_permissionsUpsertWithWhereUniqueWithoutGroupInput {
  where: Auth_group_permissionsWhereUniqueInput;
  update: Auth_group_permissionsUpdateWithoutGroupDataInput;
  create: Auth_group_permissionsCreateWithoutGroupInput;
}

export interface Auth_groupUpdateManyMutationInput {
  name?: String;
}

export interface Auth_group_permissionsCreateInput {
  group?: Auth_groupCreateOneWithoutAuth_group_permissionsesInput;
  permission?: Auth_permissionCreateOneWithoutAuth_group_permissionsesInput;
}

export interface Auth_group_permissionsUpdateInput {
  group?: Auth_groupUpdateOneWithoutAuth_group_permissionsesInput;
  permission?: Auth_permissionUpdateOneWithoutAuth_group_permissionsesInput;
}

export interface Auth_permissionCreateInput {
  auth_group_permissionses?: Auth_group_permissionsCreateManyWithoutPermissionInput;
  codename: String;
  content_type?: Django_content_typeCreateOneWithoutAuth_permissionsInput;
  name: String;
}

export interface Auth_permissionUpdateInput {
  auth_group_permissionses?: Auth_group_permissionsUpdateManyWithoutPermissionInput;
  codename?: String;
  content_type?: Django_content_typeUpdateOneWithoutAuth_permissionsInput;
  name?: String;
}

export interface Auth_permissionUpdateManyMutationInput {
  codename?: String;
  name?: String;
}

export interface Countrycity_linerCreateInput {
  label: String;
  name: String;
  rate_rates?: Rate_rateCreateManyWithoutLinerInput;
}

export interface Rate_rateCreateManyWithoutLinerInput {
  create?:
    | Rate_rateCreateWithoutLinerInput[]
    | Rate_rateCreateWithoutLinerInput;
  connect?: Rate_rateWhereUniqueInput[] | Rate_rateWhereUniqueInput;
}

export interface Rate_rateCreateWithoutLinerInput {
  account?: Rate_clientCreateOneWithoutRate_ratesInput;
  buying20: Int;
  buying40: Int;
  buying4H: Int;
  deleted: Boolean;
  dischargingFT: Int;
  effectiveDate: DateTimeInput;
  inputperson?: Account_myuserCreateOneWithoutRate_ratesInput;
  loadingFT: Int;
  offeredDate: DateTimeInput;
  pod?: Countrycity_locationCreateOneWithoutRate_rates_podsInput;
  pol?: Countrycity_locationCreateOneWithoutRate_rates_polsInput;
  recordedDate: DateTimeInput;
  remark: String;
  selling20: Int;
  selling40: Int;
  selling4H: Int;
  type?: Rate_cntrtypeCreateOneWithoutRate_ratesInput;
}

export interface Countrycity_linerUpdateInput {
  label?: String;
  name?: String;
  rate_rates?: Rate_rateUpdateManyWithoutLinerInput;
}

export interface Rate_rateUpdateManyWithoutLinerInput {
  create?:
    | Rate_rateCreateWithoutLinerInput[]
    | Rate_rateCreateWithoutLinerInput;
  delete?: Rate_rateWhereUniqueInput[] | Rate_rateWhereUniqueInput;
  connect?: Rate_rateWhereUniqueInput[] | Rate_rateWhereUniqueInput;
  disconnect?: Rate_rateWhereUniqueInput[] | Rate_rateWhereUniqueInput;
  update?:
    | Rate_rateUpdateWithWhereUniqueWithoutLinerInput[]
    | Rate_rateUpdateWithWhereUniqueWithoutLinerInput;
  upsert?:
    | Rate_rateUpsertWithWhereUniqueWithoutLinerInput[]
    | Rate_rateUpsertWithWhereUniqueWithoutLinerInput;
  deleteMany?: Rate_rateScalarWhereInput[] | Rate_rateScalarWhereInput;
  updateMany?:
    | Rate_rateUpdateManyWithWhereNestedInput[]
    | Rate_rateUpdateManyWithWhereNestedInput;
}

export interface Rate_rateUpdateWithWhereUniqueWithoutLinerInput {
  where: Rate_rateWhereUniqueInput;
  data: Rate_rateUpdateWithoutLinerDataInput;
}

export interface Rate_rateUpdateWithoutLinerDataInput {
  account?: Rate_clientUpdateOneWithoutRate_ratesInput;
  buying20?: Int;
  buying40?: Int;
  buying4H?: Int;
  deleted?: Boolean;
  dischargingFT?: Int;
  effectiveDate?: DateTimeInput;
  inputperson?: Account_myuserUpdateOneWithoutRate_ratesInput;
  loadingFT?: Int;
  offeredDate?: DateTimeInput;
  pod?: Countrycity_locationUpdateOneWithoutRate_rates_podsInput;
  pol?: Countrycity_locationUpdateOneWithoutRate_rates_polsInput;
  recordedDate?: DateTimeInput;
  remark?: String;
  selling20?: Int;
  selling40?: Int;
  selling4H?: Int;
  type?: Rate_cntrtypeUpdateOneWithoutRate_ratesInput;
}

export interface Rate_rateUpsertWithWhereUniqueWithoutLinerInput {
  where: Rate_rateWhereUniqueInput;
  update: Rate_rateUpdateWithoutLinerDataInput;
  create: Rate_rateCreateWithoutLinerInput;
}

export interface Countrycity_linerUpdateManyMutationInput {
  label?: String;
  name?: String;
}

export interface Countrycity_locationCreateInput {
  country: String;
  label: String;
  name: String;
  rate_rates_pods?: Rate_rateCreateManyWithoutPodInput;
  rate_rates_pols?: Rate_rateCreateManyWithoutPolInput;
}

export interface Countrycity_locationUpdateInput {
  country?: String;
  label?: String;
  name?: String;
  rate_rates_pods?: Rate_rateUpdateManyWithoutPodInput;
  rate_rates_pols?: Rate_rateUpdateManyWithoutPolInput;
}

export interface Countrycity_locationUpdateManyMutationInput {
  country?: String;
  label?: String;
  name?: String;
}

export interface Django_admin_logCreateInput {
  action_flag: Int;
  action_time: DateTimeInput;
  change_message: String;
  content_type?: Django_content_typeCreateOneWithoutDjango_admin_logsInput;
  object_id?: String;
  object_repr: String;
  user?: Account_myuserCreateOneWithoutDjango_admin_logsInput;
}

export interface Django_admin_logUpdateInput {
  action_flag?: Int;
  action_time?: DateTimeInput;
  change_message?: String;
  content_type?: Django_content_typeUpdateOneWithoutDjango_admin_logsInput;
  object_id?: String;
  object_repr?: String;
  user?: Account_myuserUpdateOneWithoutDjango_admin_logsInput;
}

export interface Django_admin_logUpdateManyMutationInput {
  action_flag?: Int;
  action_time?: DateTimeInput;
  change_message?: String;
  object_id?: String;
  object_repr?: String;
}

export interface Django_content_typeCreateInput {
  app_label: String;
  auth_permissions?: Auth_permissionCreateManyWithoutContent_typeInput;
  django_admin_logs?: Django_admin_logCreateManyWithoutContent_typeInput;
  model: String;
}

export interface Django_content_typeUpdateInput {
  app_label?: String;
  auth_permissions?: Auth_permissionUpdateManyWithoutContent_typeInput;
  django_admin_logs?: Django_admin_logUpdateManyWithoutContent_typeInput;
  model?: String;
}

export interface Django_content_typeUpdateManyMutationInput {
  app_label?: String;
  model?: String;
}

export interface Django_migrationsCreateInput {
  app: String;
  applied: DateTimeInput;
  name: String;
}

export interface Django_migrationsUpdateInput {
  app?: String;
  applied?: DateTimeInput;
  name?: String;
}

export interface Django_migrationsUpdateManyMutationInput {
  app?: String;
  applied?: DateTimeInput;
  name?: String;
}

export interface Django_sessionCreateInput {
  expire_date: DateTimeInput;
  session_data: String;
}

export interface Django_sessionUpdateInput {
  expire_date?: DateTimeInput;
  session_data?: String;
}

export interface Django_sessionUpdateManyMutationInput {
  expire_date?: DateTimeInput;
  session_data?: String;
}

export interface Rate_clientCreateInput {
  name: String;
  rate_rates?: Rate_rateCreateManyWithoutAccountInput;
  recordedDate: DateTimeInput;
  remarks: String;
  salesman?: Account_myuserCreateOneWithoutRate_clientsInput;
}

export interface Rate_clientUpdateInput {
  name?: String;
  rate_rates?: Rate_rateUpdateManyWithoutAccountInput;
  recordedDate?: DateTimeInput;
  remarks?: String;
  salesman?: Account_myuserUpdateOneWithoutRate_clientsInput;
}

export interface Rate_clientUpdateManyMutationInput {
  name?: String;
  recordedDate?: DateTimeInput;
  remarks?: String;
}

export interface Rate_cntrtypeCreateInput {
  name: String;
  rate_rates?: Rate_rateCreateManyWithoutTypeInput;
}

export interface Rate_rateCreateManyWithoutTypeInput {
  create?: Rate_rateCreateWithoutTypeInput[] | Rate_rateCreateWithoutTypeInput;
  connect?: Rate_rateWhereUniqueInput[] | Rate_rateWhereUniqueInput;
}

export interface Rate_rateCreateWithoutTypeInput {
  account?: Rate_clientCreateOneWithoutRate_ratesInput;
  buying20: Int;
  buying40: Int;
  buying4H: Int;
  deleted: Boolean;
  dischargingFT: Int;
  effectiveDate: DateTimeInput;
  inputperson?: Account_myuserCreateOneWithoutRate_ratesInput;
  liner?: Countrycity_linerCreateOneWithoutRate_ratesInput;
  loadingFT: Int;
  offeredDate: DateTimeInput;
  pod?: Countrycity_locationCreateOneWithoutRate_rates_podsInput;
  pol?: Countrycity_locationCreateOneWithoutRate_rates_polsInput;
  recordedDate: DateTimeInput;
  remark: String;
  selling20: Int;
  selling40: Int;
  selling4H: Int;
}

export interface Rate_cntrtypeUpdateInput {
  name?: String;
  rate_rates?: Rate_rateUpdateManyWithoutTypeInput;
}

export interface Rate_rateUpdateManyWithoutTypeInput {
  create?: Rate_rateCreateWithoutTypeInput[] | Rate_rateCreateWithoutTypeInput;
  delete?: Rate_rateWhereUniqueInput[] | Rate_rateWhereUniqueInput;
  connect?: Rate_rateWhereUniqueInput[] | Rate_rateWhereUniqueInput;
  disconnect?: Rate_rateWhereUniqueInput[] | Rate_rateWhereUniqueInput;
  update?:
    | Rate_rateUpdateWithWhereUniqueWithoutTypeInput[]
    | Rate_rateUpdateWithWhereUniqueWithoutTypeInput;
  upsert?:
    | Rate_rateUpsertWithWhereUniqueWithoutTypeInput[]
    | Rate_rateUpsertWithWhereUniqueWithoutTypeInput;
  deleteMany?: Rate_rateScalarWhereInput[] | Rate_rateScalarWhereInput;
  updateMany?:
    | Rate_rateUpdateManyWithWhereNestedInput[]
    | Rate_rateUpdateManyWithWhereNestedInput;
}

export interface Rate_rateUpdateWithWhereUniqueWithoutTypeInput {
  where: Rate_rateWhereUniqueInput;
  data: Rate_rateUpdateWithoutTypeDataInput;
}

export interface Rate_rateUpdateWithoutTypeDataInput {
  account?: Rate_clientUpdateOneWithoutRate_ratesInput;
  buying20?: Int;
  buying40?: Int;
  buying4H?: Int;
  deleted?: Boolean;
  dischargingFT?: Int;
  effectiveDate?: DateTimeInput;
  inputperson?: Account_myuserUpdateOneWithoutRate_ratesInput;
  liner?: Countrycity_linerUpdateOneWithoutRate_ratesInput;
  loadingFT?: Int;
  offeredDate?: DateTimeInput;
  pod?: Countrycity_locationUpdateOneWithoutRate_rates_podsInput;
  pol?: Countrycity_locationUpdateOneWithoutRate_rates_polsInput;
  recordedDate?: DateTimeInput;
  remark?: String;
  selling20?: Int;
  selling40?: Int;
  selling4H?: Int;
}

export interface Rate_rateUpsertWithWhereUniqueWithoutTypeInput {
  where: Rate_rateWhereUniqueInput;
  update: Rate_rateUpdateWithoutTypeDataInput;
  create: Rate_rateCreateWithoutTypeInput;
}

export interface Rate_cntrtypeUpdateManyMutationInput {
  name?: String;
}

export interface Rate_rateCreateInput {
  account?: Rate_clientCreateOneWithoutRate_ratesInput;
  buying20: Int;
  buying40: Int;
  buying4H: Int;
  deleted: Boolean;
  dischargingFT: Int;
  effectiveDate: DateTimeInput;
  inputperson?: Account_myuserCreateOneWithoutRate_ratesInput;
  liner?: Countrycity_linerCreateOneWithoutRate_ratesInput;
  loadingFT: Int;
  offeredDate: DateTimeInput;
  pod?: Countrycity_locationCreateOneWithoutRate_rates_podsInput;
  pol?: Countrycity_locationCreateOneWithoutRate_rates_polsInput;
  recordedDate: DateTimeInput;
  remark: String;
  selling20: Int;
  selling40: Int;
  selling4H: Int;
  type?: Rate_cntrtypeCreateOneWithoutRate_ratesInput;
}

export interface Rate_rateUpdateInput {
  account?: Rate_clientUpdateOneWithoutRate_ratesInput;
  buying20?: Int;
  buying40?: Int;
  buying4H?: Int;
  deleted?: Boolean;
  dischargingFT?: Int;
  effectiveDate?: DateTimeInput;
  inputperson?: Account_myuserUpdateOneWithoutRate_ratesInput;
  liner?: Countrycity_linerUpdateOneWithoutRate_ratesInput;
  loadingFT?: Int;
  offeredDate?: DateTimeInput;
  pod?: Countrycity_locationUpdateOneWithoutRate_rates_podsInput;
  pol?: Countrycity_locationUpdateOneWithoutRate_rates_polsInput;
  recordedDate?: DateTimeInput;
  remark?: String;
  selling20?: Int;
  selling40?: Int;
  selling4H?: Int;
  type?: Rate_cntrtypeUpdateOneWithoutRate_ratesInput;
}

export interface Rate_rateUpdateManyMutationInput {
  buying20?: Int;
  buying40?: Int;
  buying4H?: Int;
  deleted?: Boolean;
  dischargingFT?: Int;
  effectiveDate?: DateTimeInput;
  loadingFT?: Int;
  offeredDate?: DateTimeInput;
  recordedDate?: DateTimeInput;
  remark?: String;
  selling20?: Int;
  selling40?: Int;
  selling4H?: Int;
}

export interface Account_messageboxSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: Account_messageboxWhereInput;
  AND?:
    | Account_messageboxSubscriptionWhereInput[]
    | Account_messageboxSubscriptionWhereInput;
  OR?:
    | Account_messageboxSubscriptionWhereInput[]
    | Account_messageboxSubscriptionWhereInput;
  NOT?:
    | Account_messageboxSubscriptionWhereInput[]
    | Account_messageboxSubscriptionWhereInput;
}

export interface Account_myuserSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: Account_myuserWhereInput;
  AND?:
    | Account_myuserSubscriptionWhereInput[]
    | Account_myuserSubscriptionWhereInput;
  OR?:
    | Account_myuserSubscriptionWhereInput[]
    | Account_myuserSubscriptionWhereInput;
  NOT?:
    | Account_myuserSubscriptionWhereInput[]
    | Account_myuserSubscriptionWhereInput;
}

export interface Account_myuserprofileSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: Account_myuserprofileWhereInput;
  AND?:
    | Account_myuserprofileSubscriptionWhereInput[]
    | Account_myuserprofileSubscriptionWhereInput;
  OR?:
    | Account_myuserprofileSubscriptionWhereInput[]
    | Account_myuserprofileSubscriptionWhereInput;
  NOT?:
    | Account_myuserprofileSubscriptionWhereInput[]
    | Account_myuserprofileSubscriptionWhereInput;
}

export interface Account_ratereaderSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: Account_ratereaderWhereInput;
  AND?:
    | Account_ratereaderSubscriptionWhereInput[]
    | Account_ratereaderSubscriptionWhereInput;
  OR?:
    | Account_ratereaderSubscriptionWhereInput[]
    | Account_ratereaderSubscriptionWhereInput;
  NOT?:
    | Account_ratereaderSubscriptionWhereInput[]
    | Account_ratereaderSubscriptionWhereInput;
}

export interface Auth_groupSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: Auth_groupWhereInput;
  AND?: Auth_groupSubscriptionWhereInput[] | Auth_groupSubscriptionWhereInput;
  OR?: Auth_groupSubscriptionWhereInput[] | Auth_groupSubscriptionWhereInput;
  NOT?: Auth_groupSubscriptionWhereInput[] | Auth_groupSubscriptionWhereInput;
}

export interface Auth_group_permissionsSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: Auth_group_permissionsWhereInput;
  AND?:
    | Auth_group_permissionsSubscriptionWhereInput[]
    | Auth_group_permissionsSubscriptionWhereInput;
  OR?:
    | Auth_group_permissionsSubscriptionWhereInput[]
    | Auth_group_permissionsSubscriptionWhereInput;
  NOT?:
    | Auth_group_permissionsSubscriptionWhereInput[]
    | Auth_group_permissionsSubscriptionWhereInput;
}

export interface Auth_permissionSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: Auth_permissionWhereInput;
  AND?:
    | Auth_permissionSubscriptionWhereInput[]
    | Auth_permissionSubscriptionWhereInput;
  OR?:
    | Auth_permissionSubscriptionWhereInput[]
    | Auth_permissionSubscriptionWhereInput;
  NOT?:
    | Auth_permissionSubscriptionWhereInput[]
    | Auth_permissionSubscriptionWhereInput;
}

export interface Countrycity_linerSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: Countrycity_linerWhereInput;
  AND?:
    | Countrycity_linerSubscriptionWhereInput[]
    | Countrycity_linerSubscriptionWhereInput;
  OR?:
    | Countrycity_linerSubscriptionWhereInput[]
    | Countrycity_linerSubscriptionWhereInput;
  NOT?:
    | Countrycity_linerSubscriptionWhereInput[]
    | Countrycity_linerSubscriptionWhereInput;
}

export interface Countrycity_locationSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: Countrycity_locationWhereInput;
  AND?:
    | Countrycity_locationSubscriptionWhereInput[]
    | Countrycity_locationSubscriptionWhereInput;
  OR?:
    | Countrycity_locationSubscriptionWhereInput[]
    | Countrycity_locationSubscriptionWhereInput;
  NOT?:
    | Countrycity_locationSubscriptionWhereInput[]
    | Countrycity_locationSubscriptionWhereInput;
}

export interface Django_admin_logSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: Django_admin_logWhereInput;
  AND?:
    | Django_admin_logSubscriptionWhereInput[]
    | Django_admin_logSubscriptionWhereInput;
  OR?:
    | Django_admin_logSubscriptionWhereInput[]
    | Django_admin_logSubscriptionWhereInput;
  NOT?:
    | Django_admin_logSubscriptionWhereInput[]
    | Django_admin_logSubscriptionWhereInput;
}

export interface Django_content_typeSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: Django_content_typeWhereInput;
  AND?:
    | Django_content_typeSubscriptionWhereInput[]
    | Django_content_typeSubscriptionWhereInput;
  OR?:
    | Django_content_typeSubscriptionWhereInput[]
    | Django_content_typeSubscriptionWhereInput;
  NOT?:
    | Django_content_typeSubscriptionWhereInput[]
    | Django_content_typeSubscriptionWhereInput;
}

export interface Django_migrationsSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: Django_migrationsWhereInput;
  AND?:
    | Django_migrationsSubscriptionWhereInput[]
    | Django_migrationsSubscriptionWhereInput;
  OR?:
    | Django_migrationsSubscriptionWhereInput[]
    | Django_migrationsSubscriptionWhereInput;
  NOT?:
    | Django_migrationsSubscriptionWhereInput[]
    | Django_migrationsSubscriptionWhereInput;
}

export interface Django_sessionSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: Django_sessionWhereInput;
  AND?:
    | Django_sessionSubscriptionWhereInput[]
    | Django_sessionSubscriptionWhereInput;
  OR?:
    | Django_sessionSubscriptionWhereInput[]
    | Django_sessionSubscriptionWhereInput;
  NOT?:
    | Django_sessionSubscriptionWhereInput[]
    | Django_sessionSubscriptionWhereInput;
}

export interface Rate_clientSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: Rate_clientWhereInput;
  AND?: Rate_clientSubscriptionWhereInput[] | Rate_clientSubscriptionWhereInput;
  OR?: Rate_clientSubscriptionWhereInput[] | Rate_clientSubscriptionWhereInput;
  NOT?: Rate_clientSubscriptionWhereInput[] | Rate_clientSubscriptionWhereInput;
}

export interface Rate_cntrtypeSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: Rate_cntrtypeWhereInput;
  AND?:
    | Rate_cntrtypeSubscriptionWhereInput[]
    | Rate_cntrtypeSubscriptionWhereInput;
  OR?:
    | Rate_cntrtypeSubscriptionWhereInput[]
    | Rate_cntrtypeSubscriptionWhereInput;
  NOT?:
    | Rate_cntrtypeSubscriptionWhereInput[]
    | Rate_cntrtypeSubscriptionWhereInput;
}

export interface Rate_rateSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: Rate_rateWhereInput;
  AND?: Rate_rateSubscriptionWhereInput[] | Rate_rateSubscriptionWhereInput;
  OR?: Rate_rateSubscriptionWhereInput[] | Rate_rateSubscriptionWhereInput;
  NOT?: Rate_rateSubscriptionWhereInput[] | Rate_rateSubscriptionWhereInput;
}

export interface NodeNode {
  id: ID_Output;
}

export interface Account_messagebox {
  id: Int;
  msg: String;
  time: DateTimeOutput;
}

export interface Account_messageboxPromise
  extends Promise<Account_messagebox>,
    Fragmentable {
  id: () => Promise<Int>;
  msg: () => Promise<String>;
  receiver: <T = Account_myuserPromise>() => T;
  sender: <T = Account_myuserPromise>() => T;
  time: () => Promise<DateTimeOutput>;
}

export interface Account_messageboxSubscription
  extends Promise<AsyncIterator<Account_messagebox>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  msg: () => Promise<AsyncIterator<String>>;
  receiver: <T = Account_myuserSubscription>() => T;
  sender: <T = Account_myuserSubscription>() => T;
  time: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface Account_myuser {
  email: String;
  id: Int;
  is_active: Boolean;
  is_admin: Boolean;
  last_login?: DateTimeOutput;
  nickname: String;
  password: String;
}

export interface Account_myuserPromise
  extends Promise<Account_myuser>,
    Fragmentable {
  account_messageboxes_receivers: <T = FragmentableArray<Account_messagebox>>(
    args?: {
      where?: Account_messageboxWhereInput;
      orderBy?: Account_messageboxOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  account_messageboxes_senders: <T = FragmentableArray<Account_messagebox>>(
    args?: {
      where?: Account_messageboxWhereInput;
      orderBy?: Account_messageboxOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  account_myuserprofiles: <T = FragmentableArray<Account_myuserprofile>>(
    args?: {
      where?: Account_myuserprofileWhereInput;
      orderBy?: Account_myuserprofileOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  account_ratereaders_readers: <T = FragmentableArray<Account_ratereader>>(
    args?: {
      where?: Account_ratereaderWhereInput;
      orderBy?: Account_ratereaderOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  account_ratereaders_showers: <T = FragmentableArray<Account_ratereader>>(
    args?: {
      where?: Account_ratereaderWhereInput;
      orderBy?: Account_ratereaderOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  django_admin_logs: <T = FragmentableArray<Django_admin_log>>(
    args?: {
      where?: Django_admin_logWhereInput;
      orderBy?: Django_admin_logOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  email: () => Promise<String>;
  id: () => Promise<Int>;
  is_active: () => Promise<Boolean>;
  is_admin: () => Promise<Boolean>;
  last_login: () => Promise<DateTimeOutput>;
  nickname: () => Promise<String>;
  password: () => Promise<String>;
  rate_clients: <T = FragmentableArray<Rate_client>>(
    args?: {
      where?: Rate_clientWhereInput;
      orderBy?: Rate_clientOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  rate_rates: <T = FragmentableArray<Rate_rate>>(
    args?: {
      where?: Rate_rateWhereInput;
      orderBy?: Rate_rateOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface Account_myuserSubscription
  extends Promise<AsyncIterator<Account_myuser>>,
    Fragmentable {
  account_messageboxes_receivers: <
    T = Promise<AsyncIterator<Account_messageboxSubscription>>
  >(
    args?: {
      where?: Account_messageboxWhereInput;
      orderBy?: Account_messageboxOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  account_messageboxes_senders: <
    T = Promise<AsyncIterator<Account_messageboxSubscription>>
  >(
    args?: {
      where?: Account_messageboxWhereInput;
      orderBy?: Account_messageboxOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  account_myuserprofiles: <
    T = Promise<AsyncIterator<Account_myuserprofileSubscription>>
  >(
    args?: {
      where?: Account_myuserprofileWhereInput;
      orderBy?: Account_myuserprofileOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  account_ratereaders_readers: <
    T = Promise<AsyncIterator<Account_ratereaderSubscription>>
  >(
    args?: {
      where?: Account_ratereaderWhereInput;
      orderBy?: Account_ratereaderOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  account_ratereaders_showers: <
    T = Promise<AsyncIterator<Account_ratereaderSubscription>>
  >(
    args?: {
      where?: Account_ratereaderWhereInput;
      orderBy?: Account_ratereaderOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  django_admin_logs: <T = Promise<AsyncIterator<Django_admin_logSubscription>>>(
    args?: {
      where?: Django_admin_logWhereInput;
      orderBy?: Django_admin_logOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  email: () => Promise<AsyncIterator<String>>;
  id: () => Promise<AsyncIterator<Int>>;
  is_active: () => Promise<AsyncIterator<Boolean>>;
  is_admin: () => Promise<AsyncIterator<Boolean>>;
  last_login: () => Promise<AsyncIterator<DateTimeOutput>>;
  nickname: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  rate_clients: <T = Promise<AsyncIterator<Rate_clientSubscription>>>(
    args?: {
      where?: Rate_clientWhereInput;
      orderBy?: Rate_clientOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  rate_rates: <T = Promise<AsyncIterator<Rate_rateSubscription>>>(
    args?: {
      where?: Rate_rateWhereInput;
      orderBy?: Rate_rateOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface Account_myuserprofile {
  company: String;
  id: Int;
  image: String;
  job_boolean: String;
  profile_name: String;
}

export interface Account_myuserprofilePromise
  extends Promise<Account_myuserprofile>,
    Fragmentable {
  company: () => Promise<String>;
  id: () => Promise<Int>;
  image: () => Promise<String>;
  job_boolean: () => Promise<String>;
  owner: <T = Account_myuserPromise>() => T;
  profile_name: () => Promise<String>;
}

export interface Account_myuserprofileSubscription
  extends Promise<AsyncIterator<Account_myuserprofile>>,
    Fragmentable {
  company: () => Promise<AsyncIterator<String>>;
  id: () => Promise<AsyncIterator<Int>>;
  image: () => Promise<AsyncIterator<String>>;
  job_boolean: () => Promise<AsyncIterator<String>>;
  owner: <T = Account_myuserSubscription>() => T;
  profile_name: () => Promise<AsyncIterator<String>>;
}

export interface Account_ratereader {
  id: Int;
  relationship_date: DateTimeOutput;
}

export interface Account_ratereaderPromise
  extends Promise<Account_ratereader>,
    Fragmentable {
  id: () => Promise<Int>;
  reader: <T = Account_myuserPromise>() => T;
  relationship_date: () => Promise<DateTimeOutput>;
  shower: <T = Account_myuserPromise>() => T;
}

export interface Account_ratereaderSubscription
  extends Promise<AsyncIterator<Account_ratereader>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  reader: <T = Account_myuserSubscription>() => T;
  relationship_date: () => Promise<AsyncIterator<DateTimeOutput>>;
  shower: <T = Account_myuserSubscription>() => T;
}

export interface Django_admin_log {
  action_flag: Int;
  action_time: DateTimeOutput;
  change_message: String;
  id: Int;
  object_id?: String;
  object_repr: String;
}

export interface Django_admin_logPromise
  extends Promise<Django_admin_log>,
    Fragmentable {
  action_flag: () => Promise<Int>;
  action_time: () => Promise<DateTimeOutput>;
  change_message: () => Promise<String>;
  content_type: <T = Django_content_typePromise>() => T;
  id: () => Promise<Int>;
  object_id: () => Promise<String>;
  object_repr: () => Promise<String>;
  user: <T = Account_myuserPromise>() => T;
}

export interface Django_admin_logSubscription
  extends Promise<AsyncIterator<Django_admin_log>>,
    Fragmentable {
  action_flag: () => Promise<AsyncIterator<Int>>;
  action_time: () => Promise<AsyncIterator<DateTimeOutput>>;
  change_message: () => Promise<AsyncIterator<String>>;
  content_type: <T = Django_content_typeSubscription>() => T;
  id: () => Promise<AsyncIterator<Int>>;
  object_id: () => Promise<AsyncIterator<String>>;
  object_repr: () => Promise<AsyncIterator<String>>;
  user: <T = Account_myuserSubscription>() => T;
}

export interface Django_content_type {
  app_label: String;
  id: Int;
  model: String;
}

export interface Django_content_typePromise
  extends Promise<Django_content_type>,
    Fragmentable {
  app_label: () => Promise<String>;
  auth_permissions: <T = FragmentableArray<Auth_permission>>(
    args?: {
      where?: Auth_permissionWhereInput;
      orderBy?: Auth_permissionOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  django_admin_logs: <T = FragmentableArray<Django_admin_log>>(
    args?: {
      where?: Django_admin_logWhereInput;
      orderBy?: Django_admin_logOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  id: () => Promise<Int>;
  model: () => Promise<String>;
}

export interface Django_content_typeSubscription
  extends Promise<AsyncIterator<Django_content_type>>,
    Fragmentable {
  app_label: () => Promise<AsyncIterator<String>>;
  auth_permissions: <T = Promise<AsyncIterator<Auth_permissionSubscription>>>(
    args?: {
      where?: Auth_permissionWhereInput;
      orderBy?: Auth_permissionOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  django_admin_logs: <T = Promise<AsyncIterator<Django_admin_logSubscription>>>(
    args?: {
      where?: Django_admin_logWhereInput;
      orderBy?: Django_admin_logOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  id: () => Promise<AsyncIterator<Int>>;
  model: () => Promise<AsyncIterator<String>>;
}

export interface Auth_permission {
  codename: String;
  id: Int;
  name: String;
}

export interface Auth_permissionPromise
  extends Promise<Auth_permission>,
    Fragmentable {
  auth_group_permissionses: <T = FragmentableArray<Auth_group_permissions>>(
    args?: {
      where?: Auth_group_permissionsWhereInput;
      orderBy?: Auth_group_permissionsOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  codename: () => Promise<String>;
  content_type: <T = Django_content_typePromise>() => T;
  id: () => Promise<Int>;
  name: () => Promise<String>;
}

export interface Auth_permissionSubscription
  extends Promise<AsyncIterator<Auth_permission>>,
    Fragmentable {
  auth_group_permissionses: <
    T = Promise<AsyncIterator<Auth_group_permissionsSubscription>>
  >(
    args?: {
      where?: Auth_group_permissionsWhereInput;
      orderBy?: Auth_group_permissionsOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  codename: () => Promise<AsyncIterator<String>>;
  content_type: <T = Django_content_typeSubscription>() => T;
  id: () => Promise<AsyncIterator<Int>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface Auth_group_permissions {
  id: Int;
}

export interface Auth_group_permissionsPromise
  extends Promise<Auth_group_permissions>,
    Fragmentable {
  group: <T = Auth_groupPromise>() => T;
  id: () => Promise<Int>;
  permission: <T = Auth_permissionPromise>() => T;
}

export interface Auth_group_permissionsSubscription
  extends Promise<AsyncIterator<Auth_group_permissions>>,
    Fragmentable {
  group: <T = Auth_groupSubscription>() => T;
  id: () => Promise<AsyncIterator<Int>>;
  permission: <T = Auth_permissionSubscription>() => T;
}

export interface Auth_group {
  id: Int;
  name: String;
}

export interface Auth_groupPromise extends Promise<Auth_group>, Fragmentable {
  auth_group_permissionses: <T = FragmentableArray<Auth_group_permissions>>(
    args?: {
      where?: Auth_group_permissionsWhereInput;
      orderBy?: Auth_group_permissionsOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  id: () => Promise<Int>;
  name: () => Promise<String>;
}

export interface Auth_groupSubscription
  extends Promise<AsyncIterator<Auth_group>>,
    Fragmentable {
  auth_group_permissionses: <
    T = Promise<AsyncIterator<Auth_group_permissionsSubscription>>
  >(
    args?: {
      where?: Auth_group_permissionsWhereInput;
      orderBy?: Auth_group_permissionsOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  id: () => Promise<AsyncIterator<Int>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface Rate_client {
  id: Int;
  name: String;
  recordedDate: DateTimeOutput;
  remarks: String;
}

export interface Rate_clientPromise extends Promise<Rate_client>, Fragmentable {
  id: () => Promise<Int>;
  name: () => Promise<String>;
  rate_rates: <T = FragmentableArray<Rate_rate>>(
    args?: {
      where?: Rate_rateWhereInput;
      orderBy?: Rate_rateOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  recordedDate: () => Promise<DateTimeOutput>;
  remarks: () => Promise<String>;
  salesman: <T = Account_myuserPromise>() => T;
}

export interface Rate_clientSubscription
  extends Promise<AsyncIterator<Rate_client>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  name: () => Promise<AsyncIterator<String>>;
  rate_rates: <T = Promise<AsyncIterator<Rate_rateSubscription>>>(
    args?: {
      where?: Rate_rateWhereInput;
      orderBy?: Rate_rateOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  recordedDate: () => Promise<AsyncIterator<DateTimeOutput>>;
  remarks: () => Promise<AsyncIterator<String>>;
  salesman: <T = Account_myuserSubscription>() => T;
}

export interface Rate_rate {
  buying20: Int;
  buying40: Int;
  buying4H: Int;
  deleted: Boolean;
  dischargingFT: Int;
  effectiveDate: DateTimeOutput;
  id: Int;
  loadingFT: Int;
  offeredDate: DateTimeOutput;
  recordedDate: DateTimeOutput;
  remark: String;
  selling20: Int;
  selling40: Int;
  selling4H: Int;
}

export interface Rate_ratePromise extends Promise<Rate_rate>, Fragmentable {
  account: <T = Rate_clientPromise>() => T;
  buying20: () => Promise<Int>;
  buying40: () => Promise<Int>;
  buying4H: () => Promise<Int>;
  deleted: () => Promise<Boolean>;
  dischargingFT: () => Promise<Int>;
  effectiveDate: () => Promise<DateTimeOutput>;
  id: () => Promise<Int>;
  inputperson: <T = Account_myuserPromise>() => T;
  liner: <T = Countrycity_linerPromise>() => T;
  loadingFT: () => Promise<Int>;
  offeredDate: () => Promise<DateTimeOutput>;
  pod: <T = Countrycity_locationPromise>() => T;
  pol: <T = Countrycity_locationPromise>() => T;
  recordedDate: () => Promise<DateTimeOutput>;
  remark: () => Promise<String>;
  selling20: () => Promise<Int>;
  selling40: () => Promise<Int>;
  selling4H: () => Promise<Int>;
  type: <T = Rate_cntrtypePromise>() => T;
}

export interface Rate_rateSubscription
  extends Promise<AsyncIterator<Rate_rate>>,
    Fragmentable {
  account: <T = Rate_clientSubscription>() => T;
  buying20: () => Promise<AsyncIterator<Int>>;
  buying40: () => Promise<AsyncIterator<Int>>;
  buying4H: () => Promise<AsyncIterator<Int>>;
  deleted: () => Promise<AsyncIterator<Boolean>>;
  dischargingFT: () => Promise<AsyncIterator<Int>>;
  effectiveDate: () => Promise<AsyncIterator<DateTimeOutput>>;
  id: () => Promise<AsyncIterator<Int>>;
  inputperson: <T = Account_myuserSubscription>() => T;
  liner: <T = Countrycity_linerSubscription>() => T;
  loadingFT: () => Promise<AsyncIterator<Int>>;
  offeredDate: () => Promise<AsyncIterator<DateTimeOutput>>;
  pod: <T = Countrycity_locationSubscription>() => T;
  pol: <T = Countrycity_locationSubscription>() => T;
  recordedDate: () => Promise<AsyncIterator<DateTimeOutput>>;
  remark: () => Promise<AsyncIterator<String>>;
  selling20: () => Promise<AsyncIterator<Int>>;
  selling40: () => Promise<AsyncIterator<Int>>;
  selling4H: () => Promise<AsyncIterator<Int>>;
  type: <T = Rate_cntrtypeSubscription>() => T;
}

export interface Countrycity_liner {
  id: Int;
  label: String;
  name: String;
}

export interface Countrycity_linerPromise
  extends Promise<Countrycity_liner>,
    Fragmentable {
  id: () => Promise<Int>;
  label: () => Promise<String>;
  name: () => Promise<String>;
  rate_rates: <T = FragmentableArray<Rate_rate>>(
    args?: {
      where?: Rate_rateWhereInput;
      orderBy?: Rate_rateOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface Countrycity_linerSubscription
  extends Promise<AsyncIterator<Countrycity_liner>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  label: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  rate_rates: <T = Promise<AsyncIterator<Rate_rateSubscription>>>(
    args?: {
      where?: Rate_rateWhereInput;
      orderBy?: Rate_rateOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface Countrycity_location {
  country: String;
  id: Int;
  label: String;
  name: String;
}

export interface Countrycity_locationPromise
  extends Promise<Countrycity_location>,
    Fragmentable {
  country: () => Promise<String>;
  id: () => Promise<Int>;
  label: () => Promise<String>;
  name: () => Promise<String>;
  rate_rates_pods: <T = FragmentableArray<Rate_rate>>(
    args?: {
      where?: Rate_rateWhereInput;
      orderBy?: Rate_rateOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  rate_rates_pols: <T = FragmentableArray<Rate_rate>>(
    args?: {
      where?: Rate_rateWhereInput;
      orderBy?: Rate_rateOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface Countrycity_locationSubscription
  extends Promise<AsyncIterator<Countrycity_location>>,
    Fragmentable {
  country: () => Promise<AsyncIterator<String>>;
  id: () => Promise<AsyncIterator<Int>>;
  label: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  rate_rates_pods: <T = Promise<AsyncIterator<Rate_rateSubscription>>>(
    args?: {
      where?: Rate_rateWhereInput;
      orderBy?: Rate_rateOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  rate_rates_pols: <T = Promise<AsyncIterator<Rate_rateSubscription>>>(
    args?: {
      where?: Rate_rateWhereInput;
      orderBy?: Rate_rateOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface Rate_cntrtype {
  id: Int;
  name: String;
}

export interface Rate_cntrtypePromise
  extends Promise<Rate_cntrtype>,
    Fragmentable {
  id: () => Promise<Int>;
  name: () => Promise<String>;
  rate_rates: <T = FragmentableArray<Rate_rate>>(
    args?: {
      where?: Rate_rateWhereInput;
      orderBy?: Rate_rateOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface Rate_cntrtypeSubscription
  extends Promise<AsyncIterator<Rate_cntrtype>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  name: () => Promise<AsyncIterator<String>>;
  rate_rates: <T = Promise<AsyncIterator<Rate_rateSubscription>>>(
    args?: {
      where?: Rate_rateWhereInput;
      orderBy?: Rate_rateOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface Account_messageboxConnection {
  pageInfo: PageInfo;
  edges: Account_messageboxEdge[];
}

export interface Account_messageboxConnectionPromise
  extends Promise<Account_messageboxConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<Account_messageboxEdge>>() => T;
  aggregate: <T = AggregateAccount_messageboxPromise>() => T;
}

export interface Account_messageboxConnectionSubscription
  extends Promise<AsyncIterator<Account_messageboxConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <
    T = Promise<AsyncIterator<Account_messageboxEdgeSubscription>>
  >() => T;
  aggregate: <T = AggregateAccount_messageboxSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface Account_messageboxEdge {
  node: Account_messagebox;
  cursor: String;
}

export interface Account_messageboxEdgePromise
  extends Promise<Account_messageboxEdge>,
    Fragmentable {
  node: <T = Account_messageboxPromise>() => T;
  cursor: () => Promise<String>;
}

export interface Account_messageboxEdgeSubscription
  extends Promise<AsyncIterator<Account_messageboxEdge>>,
    Fragmentable {
  node: <T = Account_messageboxSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateAccount_messagebox {
  count: Int;
}

export interface AggregateAccount_messageboxPromise
  extends Promise<AggregateAccount_messagebox>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateAccount_messageboxSubscription
  extends Promise<AsyncIterator<AggregateAccount_messagebox>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Account_myuserConnection {
  pageInfo: PageInfo;
  edges: Account_myuserEdge[];
}

export interface Account_myuserConnectionPromise
  extends Promise<Account_myuserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<Account_myuserEdge>>() => T;
  aggregate: <T = AggregateAccount_myuserPromise>() => T;
}

export interface Account_myuserConnectionSubscription
  extends Promise<AsyncIterator<Account_myuserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<Account_myuserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateAccount_myuserSubscription>() => T;
}

export interface Account_myuserEdge {
  node: Account_myuser;
  cursor: String;
}

export interface Account_myuserEdgePromise
  extends Promise<Account_myuserEdge>,
    Fragmentable {
  node: <T = Account_myuserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface Account_myuserEdgeSubscription
  extends Promise<AsyncIterator<Account_myuserEdge>>,
    Fragmentable {
  node: <T = Account_myuserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateAccount_myuser {
  count: Int;
}

export interface AggregateAccount_myuserPromise
  extends Promise<AggregateAccount_myuser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateAccount_myuserSubscription
  extends Promise<AsyncIterator<AggregateAccount_myuser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Account_myuserprofileConnection {
  pageInfo: PageInfo;
  edges: Account_myuserprofileEdge[];
}

export interface Account_myuserprofileConnectionPromise
  extends Promise<Account_myuserprofileConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<Account_myuserprofileEdge>>() => T;
  aggregate: <T = AggregateAccount_myuserprofilePromise>() => T;
}

export interface Account_myuserprofileConnectionSubscription
  extends Promise<AsyncIterator<Account_myuserprofileConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <
    T = Promise<AsyncIterator<Account_myuserprofileEdgeSubscription>>
  >() => T;
  aggregate: <T = AggregateAccount_myuserprofileSubscription>() => T;
}

export interface Account_myuserprofileEdge {
  node: Account_myuserprofile;
  cursor: String;
}

export interface Account_myuserprofileEdgePromise
  extends Promise<Account_myuserprofileEdge>,
    Fragmentable {
  node: <T = Account_myuserprofilePromise>() => T;
  cursor: () => Promise<String>;
}

export interface Account_myuserprofileEdgeSubscription
  extends Promise<AsyncIterator<Account_myuserprofileEdge>>,
    Fragmentable {
  node: <T = Account_myuserprofileSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateAccount_myuserprofile {
  count: Int;
}

export interface AggregateAccount_myuserprofilePromise
  extends Promise<AggregateAccount_myuserprofile>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateAccount_myuserprofileSubscription
  extends Promise<AsyncIterator<AggregateAccount_myuserprofile>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Account_ratereaderConnection {
  pageInfo: PageInfo;
  edges: Account_ratereaderEdge[];
}

export interface Account_ratereaderConnectionPromise
  extends Promise<Account_ratereaderConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<Account_ratereaderEdge>>() => T;
  aggregate: <T = AggregateAccount_ratereaderPromise>() => T;
}

export interface Account_ratereaderConnectionSubscription
  extends Promise<AsyncIterator<Account_ratereaderConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <
    T = Promise<AsyncIterator<Account_ratereaderEdgeSubscription>>
  >() => T;
  aggregate: <T = AggregateAccount_ratereaderSubscription>() => T;
}

export interface Account_ratereaderEdge {
  node: Account_ratereader;
  cursor: String;
}

export interface Account_ratereaderEdgePromise
  extends Promise<Account_ratereaderEdge>,
    Fragmentable {
  node: <T = Account_ratereaderPromise>() => T;
  cursor: () => Promise<String>;
}

export interface Account_ratereaderEdgeSubscription
  extends Promise<AsyncIterator<Account_ratereaderEdge>>,
    Fragmentable {
  node: <T = Account_ratereaderSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateAccount_ratereader {
  count: Int;
}

export interface AggregateAccount_ratereaderPromise
  extends Promise<AggregateAccount_ratereader>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateAccount_ratereaderSubscription
  extends Promise<AsyncIterator<AggregateAccount_ratereader>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Auth_groupConnection {
  pageInfo: PageInfo;
  edges: Auth_groupEdge[];
}

export interface Auth_groupConnectionPromise
  extends Promise<Auth_groupConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<Auth_groupEdge>>() => T;
  aggregate: <T = AggregateAuth_groupPromise>() => T;
}

export interface Auth_groupConnectionSubscription
  extends Promise<AsyncIterator<Auth_groupConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<Auth_groupEdgeSubscription>>>() => T;
  aggregate: <T = AggregateAuth_groupSubscription>() => T;
}

export interface Auth_groupEdge {
  node: Auth_group;
  cursor: String;
}

export interface Auth_groupEdgePromise
  extends Promise<Auth_groupEdge>,
    Fragmentable {
  node: <T = Auth_groupPromise>() => T;
  cursor: () => Promise<String>;
}

export interface Auth_groupEdgeSubscription
  extends Promise<AsyncIterator<Auth_groupEdge>>,
    Fragmentable {
  node: <T = Auth_groupSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateAuth_group {
  count: Int;
}

export interface AggregateAuth_groupPromise
  extends Promise<AggregateAuth_group>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateAuth_groupSubscription
  extends Promise<AsyncIterator<AggregateAuth_group>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Auth_group_permissionsConnection {
  pageInfo: PageInfo;
  edges: Auth_group_permissionsEdge[];
}

export interface Auth_group_permissionsConnectionPromise
  extends Promise<Auth_group_permissionsConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<Auth_group_permissionsEdge>>() => T;
  aggregate: <T = AggregateAuth_group_permissionsPromise>() => T;
}

export interface Auth_group_permissionsConnectionSubscription
  extends Promise<AsyncIterator<Auth_group_permissionsConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <
    T = Promise<AsyncIterator<Auth_group_permissionsEdgeSubscription>>
  >() => T;
  aggregate: <T = AggregateAuth_group_permissionsSubscription>() => T;
}

export interface Auth_group_permissionsEdge {
  node: Auth_group_permissions;
  cursor: String;
}

export interface Auth_group_permissionsEdgePromise
  extends Promise<Auth_group_permissionsEdge>,
    Fragmentable {
  node: <T = Auth_group_permissionsPromise>() => T;
  cursor: () => Promise<String>;
}

export interface Auth_group_permissionsEdgeSubscription
  extends Promise<AsyncIterator<Auth_group_permissionsEdge>>,
    Fragmentable {
  node: <T = Auth_group_permissionsSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateAuth_group_permissions {
  count: Int;
}

export interface AggregateAuth_group_permissionsPromise
  extends Promise<AggregateAuth_group_permissions>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateAuth_group_permissionsSubscription
  extends Promise<AsyncIterator<AggregateAuth_group_permissions>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Auth_permissionConnection {
  pageInfo: PageInfo;
  edges: Auth_permissionEdge[];
}

export interface Auth_permissionConnectionPromise
  extends Promise<Auth_permissionConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<Auth_permissionEdge>>() => T;
  aggregate: <T = AggregateAuth_permissionPromise>() => T;
}

export interface Auth_permissionConnectionSubscription
  extends Promise<AsyncIterator<Auth_permissionConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<Auth_permissionEdgeSubscription>>>() => T;
  aggregate: <T = AggregateAuth_permissionSubscription>() => T;
}

export interface Auth_permissionEdge {
  node: Auth_permission;
  cursor: String;
}

export interface Auth_permissionEdgePromise
  extends Promise<Auth_permissionEdge>,
    Fragmentable {
  node: <T = Auth_permissionPromise>() => T;
  cursor: () => Promise<String>;
}

export interface Auth_permissionEdgeSubscription
  extends Promise<AsyncIterator<Auth_permissionEdge>>,
    Fragmentable {
  node: <T = Auth_permissionSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateAuth_permission {
  count: Int;
}

export interface AggregateAuth_permissionPromise
  extends Promise<AggregateAuth_permission>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateAuth_permissionSubscription
  extends Promise<AsyncIterator<AggregateAuth_permission>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Countrycity_linerConnection {
  pageInfo: PageInfo;
  edges: Countrycity_linerEdge[];
}

export interface Countrycity_linerConnectionPromise
  extends Promise<Countrycity_linerConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<Countrycity_linerEdge>>() => T;
  aggregate: <T = AggregateCountrycity_linerPromise>() => T;
}

export interface Countrycity_linerConnectionSubscription
  extends Promise<AsyncIterator<Countrycity_linerConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<Countrycity_linerEdgeSubscription>>>() => T;
  aggregate: <T = AggregateCountrycity_linerSubscription>() => T;
}

export interface Countrycity_linerEdge {
  node: Countrycity_liner;
  cursor: String;
}

export interface Countrycity_linerEdgePromise
  extends Promise<Countrycity_linerEdge>,
    Fragmentable {
  node: <T = Countrycity_linerPromise>() => T;
  cursor: () => Promise<String>;
}

export interface Countrycity_linerEdgeSubscription
  extends Promise<AsyncIterator<Countrycity_linerEdge>>,
    Fragmentable {
  node: <T = Countrycity_linerSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateCountrycity_liner {
  count: Int;
}

export interface AggregateCountrycity_linerPromise
  extends Promise<AggregateCountrycity_liner>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCountrycity_linerSubscription
  extends Promise<AsyncIterator<AggregateCountrycity_liner>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Countrycity_locationConnection {
  pageInfo: PageInfo;
  edges: Countrycity_locationEdge[];
}

export interface Countrycity_locationConnectionPromise
  extends Promise<Countrycity_locationConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<Countrycity_locationEdge>>() => T;
  aggregate: <T = AggregateCountrycity_locationPromise>() => T;
}

export interface Countrycity_locationConnectionSubscription
  extends Promise<AsyncIterator<Countrycity_locationConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <
    T = Promise<AsyncIterator<Countrycity_locationEdgeSubscription>>
  >() => T;
  aggregate: <T = AggregateCountrycity_locationSubscription>() => T;
}

export interface Countrycity_locationEdge {
  node: Countrycity_location;
  cursor: String;
}

export interface Countrycity_locationEdgePromise
  extends Promise<Countrycity_locationEdge>,
    Fragmentable {
  node: <T = Countrycity_locationPromise>() => T;
  cursor: () => Promise<String>;
}

export interface Countrycity_locationEdgeSubscription
  extends Promise<AsyncIterator<Countrycity_locationEdge>>,
    Fragmentable {
  node: <T = Countrycity_locationSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateCountrycity_location {
  count: Int;
}

export interface AggregateCountrycity_locationPromise
  extends Promise<AggregateCountrycity_location>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCountrycity_locationSubscription
  extends Promise<AsyncIterator<AggregateCountrycity_location>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Django_admin_logConnection {
  pageInfo: PageInfo;
  edges: Django_admin_logEdge[];
}

export interface Django_admin_logConnectionPromise
  extends Promise<Django_admin_logConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<Django_admin_logEdge>>() => T;
  aggregate: <T = AggregateDjango_admin_logPromise>() => T;
}

export interface Django_admin_logConnectionSubscription
  extends Promise<AsyncIterator<Django_admin_logConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<Django_admin_logEdgeSubscription>>>() => T;
  aggregate: <T = AggregateDjango_admin_logSubscription>() => T;
}

export interface Django_admin_logEdge {
  node: Django_admin_log;
  cursor: String;
}

export interface Django_admin_logEdgePromise
  extends Promise<Django_admin_logEdge>,
    Fragmentable {
  node: <T = Django_admin_logPromise>() => T;
  cursor: () => Promise<String>;
}

export interface Django_admin_logEdgeSubscription
  extends Promise<AsyncIterator<Django_admin_logEdge>>,
    Fragmentable {
  node: <T = Django_admin_logSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateDjango_admin_log {
  count: Int;
}

export interface AggregateDjango_admin_logPromise
  extends Promise<AggregateDjango_admin_log>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateDjango_admin_logSubscription
  extends Promise<AsyncIterator<AggregateDjango_admin_log>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Django_content_typeConnection {
  pageInfo: PageInfo;
  edges: Django_content_typeEdge[];
}

export interface Django_content_typeConnectionPromise
  extends Promise<Django_content_typeConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<Django_content_typeEdge>>() => T;
  aggregate: <T = AggregateDjango_content_typePromise>() => T;
}

export interface Django_content_typeConnectionSubscription
  extends Promise<AsyncIterator<Django_content_typeConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <
    T = Promise<AsyncIterator<Django_content_typeEdgeSubscription>>
  >() => T;
  aggregate: <T = AggregateDjango_content_typeSubscription>() => T;
}

export interface Django_content_typeEdge {
  node: Django_content_type;
  cursor: String;
}

export interface Django_content_typeEdgePromise
  extends Promise<Django_content_typeEdge>,
    Fragmentable {
  node: <T = Django_content_typePromise>() => T;
  cursor: () => Promise<String>;
}

export interface Django_content_typeEdgeSubscription
  extends Promise<AsyncIterator<Django_content_typeEdge>>,
    Fragmentable {
  node: <T = Django_content_typeSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateDjango_content_type {
  count: Int;
}

export interface AggregateDjango_content_typePromise
  extends Promise<AggregateDjango_content_type>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateDjango_content_typeSubscription
  extends Promise<AsyncIterator<AggregateDjango_content_type>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Django_migrations {
  app: String;
  applied: DateTimeOutput;
  id: Int;
  name: String;
}

export interface Django_migrationsPromise
  extends Promise<Django_migrations>,
    Fragmentable {
  app: () => Promise<String>;
  applied: () => Promise<DateTimeOutput>;
  id: () => Promise<Int>;
  name: () => Promise<String>;
}

export interface Django_migrationsSubscription
  extends Promise<AsyncIterator<Django_migrations>>,
    Fragmentable {
  app: () => Promise<AsyncIterator<String>>;
  applied: () => Promise<AsyncIterator<DateTimeOutput>>;
  id: () => Promise<AsyncIterator<Int>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface Django_migrationsConnection {
  pageInfo: PageInfo;
  edges: Django_migrationsEdge[];
}

export interface Django_migrationsConnectionPromise
  extends Promise<Django_migrationsConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<Django_migrationsEdge>>() => T;
  aggregate: <T = AggregateDjango_migrationsPromise>() => T;
}

export interface Django_migrationsConnectionSubscription
  extends Promise<AsyncIterator<Django_migrationsConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<Django_migrationsEdgeSubscription>>>() => T;
  aggregate: <T = AggregateDjango_migrationsSubscription>() => T;
}

export interface Django_migrationsEdge {
  node: Django_migrations;
  cursor: String;
}

export interface Django_migrationsEdgePromise
  extends Promise<Django_migrationsEdge>,
    Fragmentable {
  node: <T = Django_migrationsPromise>() => T;
  cursor: () => Promise<String>;
}

export interface Django_migrationsEdgeSubscription
  extends Promise<AsyncIterator<Django_migrationsEdge>>,
    Fragmentable {
  node: <T = Django_migrationsSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateDjango_migrations {
  count: Int;
}

export interface AggregateDjango_migrationsPromise
  extends Promise<AggregateDjango_migrations>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateDjango_migrationsSubscription
  extends Promise<AsyncIterator<AggregateDjango_migrations>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Django_session {
  expire_date: DateTimeOutput;
  id: ID_Output;
  session_data: String;
}

export interface Django_sessionPromise
  extends Promise<Django_session>,
    Fragmentable {
  expire_date: () => Promise<DateTimeOutput>;
  id: () => Promise<ID_Output>;
  session_data: () => Promise<String>;
}

export interface Django_sessionSubscription
  extends Promise<AsyncIterator<Django_session>>,
    Fragmentable {
  expire_date: () => Promise<AsyncIterator<DateTimeOutput>>;
  id: () => Promise<AsyncIterator<ID_Output>>;
  session_data: () => Promise<AsyncIterator<String>>;
}

export interface Django_sessionConnection {
  pageInfo: PageInfo;
  edges: Django_sessionEdge[];
}

export interface Django_sessionConnectionPromise
  extends Promise<Django_sessionConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<Django_sessionEdge>>() => T;
  aggregate: <T = AggregateDjango_sessionPromise>() => T;
}

export interface Django_sessionConnectionSubscription
  extends Promise<AsyncIterator<Django_sessionConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<Django_sessionEdgeSubscription>>>() => T;
  aggregate: <T = AggregateDjango_sessionSubscription>() => T;
}

export interface Django_sessionEdge {
  node: Django_session;
  cursor: String;
}

export interface Django_sessionEdgePromise
  extends Promise<Django_sessionEdge>,
    Fragmentable {
  node: <T = Django_sessionPromise>() => T;
  cursor: () => Promise<String>;
}

export interface Django_sessionEdgeSubscription
  extends Promise<AsyncIterator<Django_sessionEdge>>,
    Fragmentable {
  node: <T = Django_sessionSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateDjango_session {
  count: Int;
}

export interface AggregateDjango_sessionPromise
  extends Promise<AggregateDjango_session>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateDjango_sessionSubscription
  extends Promise<AsyncIterator<AggregateDjango_session>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Rate_clientConnection {
  pageInfo: PageInfo;
  edges: Rate_clientEdge[];
}

export interface Rate_clientConnectionPromise
  extends Promise<Rate_clientConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<Rate_clientEdge>>() => T;
  aggregate: <T = AggregateRate_clientPromise>() => T;
}

export interface Rate_clientConnectionSubscription
  extends Promise<AsyncIterator<Rate_clientConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<Rate_clientEdgeSubscription>>>() => T;
  aggregate: <T = AggregateRate_clientSubscription>() => T;
}

export interface Rate_clientEdge {
  node: Rate_client;
  cursor: String;
}

export interface Rate_clientEdgePromise
  extends Promise<Rate_clientEdge>,
    Fragmentable {
  node: <T = Rate_clientPromise>() => T;
  cursor: () => Promise<String>;
}

export interface Rate_clientEdgeSubscription
  extends Promise<AsyncIterator<Rate_clientEdge>>,
    Fragmentable {
  node: <T = Rate_clientSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateRate_client {
  count: Int;
}

export interface AggregateRate_clientPromise
  extends Promise<AggregateRate_client>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateRate_clientSubscription
  extends Promise<AsyncIterator<AggregateRate_client>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Rate_cntrtypeConnection {
  pageInfo: PageInfo;
  edges: Rate_cntrtypeEdge[];
}

export interface Rate_cntrtypeConnectionPromise
  extends Promise<Rate_cntrtypeConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<Rate_cntrtypeEdge>>() => T;
  aggregate: <T = AggregateRate_cntrtypePromise>() => T;
}

export interface Rate_cntrtypeConnectionSubscription
  extends Promise<AsyncIterator<Rate_cntrtypeConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<Rate_cntrtypeEdgeSubscription>>>() => T;
  aggregate: <T = AggregateRate_cntrtypeSubscription>() => T;
}

export interface Rate_cntrtypeEdge {
  node: Rate_cntrtype;
  cursor: String;
}

export interface Rate_cntrtypeEdgePromise
  extends Promise<Rate_cntrtypeEdge>,
    Fragmentable {
  node: <T = Rate_cntrtypePromise>() => T;
  cursor: () => Promise<String>;
}

export interface Rate_cntrtypeEdgeSubscription
  extends Promise<AsyncIterator<Rate_cntrtypeEdge>>,
    Fragmentable {
  node: <T = Rate_cntrtypeSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateRate_cntrtype {
  count: Int;
}

export interface AggregateRate_cntrtypePromise
  extends Promise<AggregateRate_cntrtype>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateRate_cntrtypeSubscription
  extends Promise<AsyncIterator<AggregateRate_cntrtype>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Rate_rateConnection {
  pageInfo: PageInfo;
  edges: Rate_rateEdge[];
}

export interface Rate_rateConnectionPromise
  extends Promise<Rate_rateConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<Rate_rateEdge>>() => T;
  aggregate: <T = AggregateRate_ratePromise>() => T;
}

export interface Rate_rateConnectionSubscription
  extends Promise<AsyncIterator<Rate_rateConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<Rate_rateEdgeSubscription>>>() => T;
  aggregate: <T = AggregateRate_rateSubscription>() => T;
}

export interface Rate_rateEdge {
  node: Rate_rate;
  cursor: String;
}

export interface Rate_rateEdgePromise
  extends Promise<Rate_rateEdge>,
    Fragmentable {
  node: <T = Rate_ratePromise>() => T;
  cursor: () => Promise<String>;
}

export interface Rate_rateEdgeSubscription
  extends Promise<AsyncIterator<Rate_rateEdge>>,
    Fragmentable {
  node: <T = Rate_rateSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateRate_rate {
  count: Int;
}

export interface AggregateRate_ratePromise
  extends Promise<AggregateRate_rate>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateRate_rateSubscription
  extends Promise<AsyncIterator<AggregateRate_rate>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface Account_messageboxSubscriptionPayload {
  mutation: MutationType;
  node: Account_messagebox;
  updatedFields: String[];
  previousValues: Account_messageboxPreviousValues;
}

export interface Account_messageboxSubscriptionPayloadPromise
  extends Promise<Account_messageboxSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = Account_messageboxPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = Account_messageboxPreviousValuesPromise>() => T;
}

export interface Account_messageboxSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<Account_messageboxSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = Account_messageboxSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = Account_messageboxPreviousValuesSubscription>() => T;
}

export interface Account_messageboxPreviousValues {
  id: Int;
  msg: String;
  time: DateTimeOutput;
}

export interface Account_messageboxPreviousValuesPromise
  extends Promise<Account_messageboxPreviousValues>,
    Fragmentable {
  id: () => Promise<Int>;
  msg: () => Promise<String>;
  time: () => Promise<DateTimeOutput>;
}

export interface Account_messageboxPreviousValuesSubscription
  extends Promise<AsyncIterator<Account_messageboxPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  msg: () => Promise<AsyncIterator<String>>;
  time: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface Account_myuserSubscriptionPayload {
  mutation: MutationType;
  node: Account_myuser;
  updatedFields: String[];
  previousValues: Account_myuserPreviousValues;
}

export interface Account_myuserSubscriptionPayloadPromise
  extends Promise<Account_myuserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = Account_myuserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = Account_myuserPreviousValuesPromise>() => T;
}

export interface Account_myuserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<Account_myuserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = Account_myuserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = Account_myuserPreviousValuesSubscription>() => T;
}

export interface Account_myuserPreviousValues {
  email: String;
  id: Int;
  is_active: Boolean;
  is_admin: Boolean;
  last_login?: DateTimeOutput;
  nickname: String;
  password: String;
}

export interface Account_myuserPreviousValuesPromise
  extends Promise<Account_myuserPreviousValues>,
    Fragmentable {
  email: () => Promise<String>;
  id: () => Promise<Int>;
  is_active: () => Promise<Boolean>;
  is_admin: () => Promise<Boolean>;
  last_login: () => Promise<DateTimeOutput>;
  nickname: () => Promise<String>;
  password: () => Promise<String>;
}

export interface Account_myuserPreviousValuesSubscription
  extends Promise<AsyncIterator<Account_myuserPreviousValues>>,
    Fragmentable {
  email: () => Promise<AsyncIterator<String>>;
  id: () => Promise<AsyncIterator<Int>>;
  is_active: () => Promise<AsyncIterator<Boolean>>;
  is_admin: () => Promise<AsyncIterator<Boolean>>;
  last_login: () => Promise<AsyncIterator<DateTimeOutput>>;
  nickname: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
}

export interface Account_myuserprofileSubscriptionPayload {
  mutation: MutationType;
  node: Account_myuserprofile;
  updatedFields: String[];
  previousValues: Account_myuserprofilePreviousValues;
}

export interface Account_myuserprofileSubscriptionPayloadPromise
  extends Promise<Account_myuserprofileSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = Account_myuserprofilePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = Account_myuserprofilePreviousValuesPromise>() => T;
}

export interface Account_myuserprofileSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<Account_myuserprofileSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = Account_myuserprofileSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = Account_myuserprofilePreviousValuesSubscription>() => T;
}

export interface Account_myuserprofilePreviousValues {
  company: String;
  id: Int;
  image: String;
  job_boolean: String;
  profile_name: String;
}

export interface Account_myuserprofilePreviousValuesPromise
  extends Promise<Account_myuserprofilePreviousValues>,
    Fragmentable {
  company: () => Promise<String>;
  id: () => Promise<Int>;
  image: () => Promise<String>;
  job_boolean: () => Promise<String>;
  profile_name: () => Promise<String>;
}

export interface Account_myuserprofilePreviousValuesSubscription
  extends Promise<AsyncIterator<Account_myuserprofilePreviousValues>>,
    Fragmentable {
  company: () => Promise<AsyncIterator<String>>;
  id: () => Promise<AsyncIterator<Int>>;
  image: () => Promise<AsyncIterator<String>>;
  job_boolean: () => Promise<AsyncIterator<String>>;
  profile_name: () => Promise<AsyncIterator<String>>;
}

export interface Account_ratereaderSubscriptionPayload {
  mutation: MutationType;
  node: Account_ratereader;
  updatedFields: String[];
  previousValues: Account_ratereaderPreviousValues;
}

export interface Account_ratereaderSubscriptionPayloadPromise
  extends Promise<Account_ratereaderSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = Account_ratereaderPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = Account_ratereaderPreviousValuesPromise>() => T;
}

export interface Account_ratereaderSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<Account_ratereaderSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = Account_ratereaderSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = Account_ratereaderPreviousValuesSubscription>() => T;
}

export interface Account_ratereaderPreviousValues {
  id: Int;
  relationship_date: DateTimeOutput;
}

export interface Account_ratereaderPreviousValuesPromise
  extends Promise<Account_ratereaderPreviousValues>,
    Fragmentable {
  id: () => Promise<Int>;
  relationship_date: () => Promise<DateTimeOutput>;
}

export interface Account_ratereaderPreviousValuesSubscription
  extends Promise<AsyncIterator<Account_ratereaderPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  relationship_date: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface Auth_groupSubscriptionPayload {
  mutation: MutationType;
  node: Auth_group;
  updatedFields: String[];
  previousValues: Auth_groupPreviousValues;
}

export interface Auth_groupSubscriptionPayloadPromise
  extends Promise<Auth_groupSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = Auth_groupPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = Auth_groupPreviousValuesPromise>() => T;
}

export interface Auth_groupSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<Auth_groupSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = Auth_groupSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = Auth_groupPreviousValuesSubscription>() => T;
}

export interface Auth_groupPreviousValues {
  id: Int;
  name: String;
}

export interface Auth_groupPreviousValuesPromise
  extends Promise<Auth_groupPreviousValues>,
    Fragmentable {
  id: () => Promise<Int>;
  name: () => Promise<String>;
}

export interface Auth_groupPreviousValuesSubscription
  extends Promise<AsyncIterator<Auth_groupPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface Auth_group_permissionsSubscriptionPayload {
  mutation: MutationType;
  node: Auth_group_permissions;
  updatedFields: String[];
  previousValues: Auth_group_permissionsPreviousValues;
}

export interface Auth_group_permissionsSubscriptionPayloadPromise
  extends Promise<Auth_group_permissionsSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = Auth_group_permissionsPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = Auth_group_permissionsPreviousValuesPromise>() => T;
}

export interface Auth_group_permissionsSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<Auth_group_permissionsSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = Auth_group_permissionsSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = Auth_group_permissionsPreviousValuesSubscription>() => T;
}

export interface Auth_group_permissionsPreviousValues {
  id: Int;
}

export interface Auth_group_permissionsPreviousValuesPromise
  extends Promise<Auth_group_permissionsPreviousValues>,
    Fragmentable {
  id: () => Promise<Int>;
}

export interface Auth_group_permissionsPreviousValuesSubscription
  extends Promise<AsyncIterator<Auth_group_permissionsPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
}

export interface Auth_permissionSubscriptionPayload {
  mutation: MutationType;
  node: Auth_permission;
  updatedFields: String[];
  previousValues: Auth_permissionPreviousValues;
}

export interface Auth_permissionSubscriptionPayloadPromise
  extends Promise<Auth_permissionSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = Auth_permissionPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = Auth_permissionPreviousValuesPromise>() => T;
}

export interface Auth_permissionSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<Auth_permissionSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = Auth_permissionSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = Auth_permissionPreviousValuesSubscription>() => T;
}

export interface Auth_permissionPreviousValues {
  codename: String;
  id: Int;
  name: String;
}

export interface Auth_permissionPreviousValuesPromise
  extends Promise<Auth_permissionPreviousValues>,
    Fragmentable {
  codename: () => Promise<String>;
  id: () => Promise<Int>;
  name: () => Promise<String>;
}

export interface Auth_permissionPreviousValuesSubscription
  extends Promise<AsyncIterator<Auth_permissionPreviousValues>>,
    Fragmentable {
  codename: () => Promise<AsyncIterator<String>>;
  id: () => Promise<AsyncIterator<Int>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface Countrycity_linerSubscriptionPayload {
  mutation: MutationType;
  node: Countrycity_liner;
  updatedFields: String[];
  previousValues: Countrycity_linerPreviousValues;
}

export interface Countrycity_linerSubscriptionPayloadPromise
  extends Promise<Countrycity_linerSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = Countrycity_linerPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = Countrycity_linerPreviousValuesPromise>() => T;
}

export interface Countrycity_linerSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<Countrycity_linerSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = Countrycity_linerSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = Countrycity_linerPreviousValuesSubscription>() => T;
}

export interface Countrycity_linerPreviousValues {
  id: Int;
  label: String;
  name: String;
}

export interface Countrycity_linerPreviousValuesPromise
  extends Promise<Countrycity_linerPreviousValues>,
    Fragmentable {
  id: () => Promise<Int>;
  label: () => Promise<String>;
  name: () => Promise<String>;
}

export interface Countrycity_linerPreviousValuesSubscription
  extends Promise<AsyncIterator<Countrycity_linerPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  label: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface Countrycity_locationSubscriptionPayload {
  mutation: MutationType;
  node: Countrycity_location;
  updatedFields: String[];
  previousValues: Countrycity_locationPreviousValues;
}

export interface Countrycity_locationSubscriptionPayloadPromise
  extends Promise<Countrycity_locationSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = Countrycity_locationPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = Countrycity_locationPreviousValuesPromise>() => T;
}

export interface Countrycity_locationSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<Countrycity_locationSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = Countrycity_locationSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = Countrycity_locationPreviousValuesSubscription>() => T;
}

export interface Countrycity_locationPreviousValues {
  country: String;
  id: Int;
  label: String;
  name: String;
}

export interface Countrycity_locationPreviousValuesPromise
  extends Promise<Countrycity_locationPreviousValues>,
    Fragmentable {
  country: () => Promise<String>;
  id: () => Promise<Int>;
  label: () => Promise<String>;
  name: () => Promise<String>;
}

export interface Countrycity_locationPreviousValuesSubscription
  extends Promise<AsyncIterator<Countrycity_locationPreviousValues>>,
    Fragmentable {
  country: () => Promise<AsyncIterator<String>>;
  id: () => Promise<AsyncIterator<Int>>;
  label: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface Django_admin_logSubscriptionPayload {
  mutation: MutationType;
  node: Django_admin_log;
  updatedFields: String[];
  previousValues: Django_admin_logPreviousValues;
}

export interface Django_admin_logSubscriptionPayloadPromise
  extends Promise<Django_admin_logSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = Django_admin_logPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = Django_admin_logPreviousValuesPromise>() => T;
}

export interface Django_admin_logSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<Django_admin_logSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = Django_admin_logSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = Django_admin_logPreviousValuesSubscription>() => T;
}

export interface Django_admin_logPreviousValues {
  action_flag: Int;
  action_time: DateTimeOutput;
  change_message: String;
  id: Int;
  object_id?: String;
  object_repr: String;
}

export interface Django_admin_logPreviousValuesPromise
  extends Promise<Django_admin_logPreviousValues>,
    Fragmentable {
  action_flag: () => Promise<Int>;
  action_time: () => Promise<DateTimeOutput>;
  change_message: () => Promise<String>;
  id: () => Promise<Int>;
  object_id: () => Promise<String>;
  object_repr: () => Promise<String>;
}

export interface Django_admin_logPreviousValuesSubscription
  extends Promise<AsyncIterator<Django_admin_logPreviousValues>>,
    Fragmentable {
  action_flag: () => Promise<AsyncIterator<Int>>;
  action_time: () => Promise<AsyncIterator<DateTimeOutput>>;
  change_message: () => Promise<AsyncIterator<String>>;
  id: () => Promise<AsyncIterator<Int>>;
  object_id: () => Promise<AsyncIterator<String>>;
  object_repr: () => Promise<AsyncIterator<String>>;
}

export interface Django_content_typeSubscriptionPayload {
  mutation: MutationType;
  node: Django_content_type;
  updatedFields: String[];
  previousValues: Django_content_typePreviousValues;
}

export interface Django_content_typeSubscriptionPayloadPromise
  extends Promise<Django_content_typeSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = Django_content_typePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = Django_content_typePreviousValuesPromise>() => T;
}

export interface Django_content_typeSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<Django_content_typeSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = Django_content_typeSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = Django_content_typePreviousValuesSubscription>() => T;
}

export interface Django_content_typePreviousValues {
  app_label: String;
  id: Int;
  model: String;
}

export interface Django_content_typePreviousValuesPromise
  extends Promise<Django_content_typePreviousValues>,
    Fragmentable {
  app_label: () => Promise<String>;
  id: () => Promise<Int>;
  model: () => Promise<String>;
}

export interface Django_content_typePreviousValuesSubscription
  extends Promise<AsyncIterator<Django_content_typePreviousValues>>,
    Fragmentable {
  app_label: () => Promise<AsyncIterator<String>>;
  id: () => Promise<AsyncIterator<Int>>;
  model: () => Promise<AsyncIterator<String>>;
}

export interface Django_migrationsSubscriptionPayload {
  mutation: MutationType;
  node: Django_migrations;
  updatedFields: String[];
  previousValues: Django_migrationsPreviousValues;
}

export interface Django_migrationsSubscriptionPayloadPromise
  extends Promise<Django_migrationsSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = Django_migrationsPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = Django_migrationsPreviousValuesPromise>() => T;
}

export interface Django_migrationsSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<Django_migrationsSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = Django_migrationsSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = Django_migrationsPreviousValuesSubscription>() => T;
}

export interface Django_migrationsPreviousValues {
  app: String;
  applied: DateTimeOutput;
  id: Int;
  name: String;
}

export interface Django_migrationsPreviousValuesPromise
  extends Promise<Django_migrationsPreviousValues>,
    Fragmentable {
  app: () => Promise<String>;
  applied: () => Promise<DateTimeOutput>;
  id: () => Promise<Int>;
  name: () => Promise<String>;
}

export interface Django_migrationsPreviousValuesSubscription
  extends Promise<AsyncIterator<Django_migrationsPreviousValues>>,
    Fragmentable {
  app: () => Promise<AsyncIterator<String>>;
  applied: () => Promise<AsyncIterator<DateTimeOutput>>;
  id: () => Promise<AsyncIterator<Int>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface Django_sessionSubscriptionPayload {
  mutation: MutationType;
  node: Django_session;
  updatedFields: String[];
  previousValues: Django_sessionPreviousValues;
}

export interface Django_sessionSubscriptionPayloadPromise
  extends Promise<Django_sessionSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = Django_sessionPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = Django_sessionPreviousValuesPromise>() => T;
}

export interface Django_sessionSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<Django_sessionSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = Django_sessionSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = Django_sessionPreviousValuesSubscription>() => T;
}

export interface Django_sessionPreviousValues {
  expire_date: DateTimeOutput;
  id: ID_Output;
  session_data: String;
}

export interface Django_sessionPreviousValuesPromise
  extends Promise<Django_sessionPreviousValues>,
    Fragmentable {
  expire_date: () => Promise<DateTimeOutput>;
  id: () => Promise<ID_Output>;
  session_data: () => Promise<String>;
}

export interface Django_sessionPreviousValuesSubscription
  extends Promise<AsyncIterator<Django_sessionPreviousValues>>,
    Fragmentable {
  expire_date: () => Promise<AsyncIterator<DateTimeOutput>>;
  id: () => Promise<AsyncIterator<ID_Output>>;
  session_data: () => Promise<AsyncIterator<String>>;
}

export interface Rate_clientSubscriptionPayload {
  mutation: MutationType;
  node: Rate_client;
  updatedFields: String[];
  previousValues: Rate_clientPreviousValues;
}

export interface Rate_clientSubscriptionPayloadPromise
  extends Promise<Rate_clientSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = Rate_clientPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = Rate_clientPreviousValuesPromise>() => T;
}

export interface Rate_clientSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<Rate_clientSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = Rate_clientSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = Rate_clientPreviousValuesSubscription>() => T;
}

export interface Rate_clientPreviousValues {
  id: Int;
  name: String;
  recordedDate: DateTimeOutput;
  remarks: String;
}

export interface Rate_clientPreviousValuesPromise
  extends Promise<Rate_clientPreviousValues>,
    Fragmentable {
  id: () => Promise<Int>;
  name: () => Promise<String>;
  recordedDate: () => Promise<DateTimeOutput>;
  remarks: () => Promise<String>;
}

export interface Rate_clientPreviousValuesSubscription
  extends Promise<AsyncIterator<Rate_clientPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  name: () => Promise<AsyncIterator<String>>;
  recordedDate: () => Promise<AsyncIterator<DateTimeOutput>>;
  remarks: () => Promise<AsyncIterator<String>>;
}

export interface Rate_cntrtypeSubscriptionPayload {
  mutation: MutationType;
  node: Rate_cntrtype;
  updatedFields: String[];
  previousValues: Rate_cntrtypePreviousValues;
}

export interface Rate_cntrtypeSubscriptionPayloadPromise
  extends Promise<Rate_cntrtypeSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = Rate_cntrtypePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = Rate_cntrtypePreviousValuesPromise>() => T;
}

export interface Rate_cntrtypeSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<Rate_cntrtypeSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = Rate_cntrtypeSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = Rate_cntrtypePreviousValuesSubscription>() => T;
}

export interface Rate_cntrtypePreviousValues {
  id: Int;
  name: String;
}

export interface Rate_cntrtypePreviousValuesPromise
  extends Promise<Rate_cntrtypePreviousValues>,
    Fragmentable {
  id: () => Promise<Int>;
  name: () => Promise<String>;
}

export interface Rate_cntrtypePreviousValuesSubscription
  extends Promise<AsyncIterator<Rate_cntrtypePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface Rate_rateSubscriptionPayload {
  mutation: MutationType;
  node: Rate_rate;
  updatedFields: String[];
  previousValues: Rate_ratePreviousValues;
}

export interface Rate_rateSubscriptionPayloadPromise
  extends Promise<Rate_rateSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = Rate_ratePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = Rate_ratePreviousValuesPromise>() => T;
}

export interface Rate_rateSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<Rate_rateSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = Rate_rateSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = Rate_ratePreviousValuesSubscription>() => T;
}

export interface Rate_ratePreviousValues {
  buying20: Int;
  buying40: Int;
  buying4H: Int;
  deleted: Boolean;
  dischargingFT: Int;
  effectiveDate: DateTimeOutput;
  id: Int;
  loadingFT: Int;
  offeredDate: DateTimeOutput;
  recordedDate: DateTimeOutput;
  remark: String;
  selling20: Int;
  selling40: Int;
  selling4H: Int;
}

export interface Rate_ratePreviousValuesPromise
  extends Promise<Rate_ratePreviousValues>,
    Fragmentable {
  buying20: () => Promise<Int>;
  buying40: () => Promise<Int>;
  buying4H: () => Promise<Int>;
  deleted: () => Promise<Boolean>;
  dischargingFT: () => Promise<Int>;
  effectiveDate: () => Promise<DateTimeOutput>;
  id: () => Promise<Int>;
  loadingFT: () => Promise<Int>;
  offeredDate: () => Promise<DateTimeOutput>;
  recordedDate: () => Promise<DateTimeOutput>;
  remark: () => Promise<String>;
  selling20: () => Promise<Int>;
  selling40: () => Promise<Int>;
  selling4H: () => Promise<Int>;
}

export interface Rate_ratePreviousValuesSubscription
  extends Promise<AsyncIterator<Rate_ratePreviousValues>>,
    Fragmentable {
  buying20: () => Promise<AsyncIterator<Int>>;
  buying40: () => Promise<AsyncIterator<Int>>;
  buying4H: () => Promise<AsyncIterator<Int>>;
  deleted: () => Promise<AsyncIterator<Boolean>>;
  dischargingFT: () => Promise<AsyncIterator<Int>>;
  effectiveDate: () => Promise<AsyncIterator<DateTimeOutput>>;
  id: () => Promise<AsyncIterator<Int>>;
  loadingFT: () => Promise<AsyncIterator<Int>>;
  offeredDate: () => Promise<AsyncIterator<DateTimeOutput>>;
  recordedDate: () => Promise<AsyncIterator<DateTimeOutput>>;
  remark: () => Promise<AsyncIterator<String>>;
  selling20: () => Promise<AsyncIterator<Int>>;
  selling40: () => Promise<AsyncIterator<Int>>;
  selling4H: () => Promise<AsyncIterator<Int>>;
}

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "Account_messagebox",
    embedded: false
  },
  {
    name: "Account_myuser",
    embedded: false
  },
  {
    name: "Account_myuserprofile",
    embedded: false
  },
  {
    name: "Account_ratereader",
    embedded: false
  },
  {
    name: "Auth_group",
    embedded: false
  },
  {
    name: "Auth_group_permissions",
    embedded: false
  },
  {
    name: "Auth_permission",
    embedded: false
  },
  {
    name: "Countrycity_liner",
    embedded: false
  },
  {
    name: "Countrycity_location",
    embedded: false
  },
  {
    name: "Django_admin_log",
    embedded: false
  },
  {
    name: "Django_content_type",
    embedded: false
  },
  {
    name: "Django_migrations",
    embedded: false
  },
  {
    name: "Django_session",
    embedded: false
  },
  {
    name: "Rate_client",
    embedded: false
  },
  {
    name: "Rate_cntrtype",
    embedded: false
  },
  {
    name: "Rate_rate",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const Prisma = makePrismaClientClass<ClientConstructor<Prisma>>({
  typeDefs,
  models,
  endpoint: `http://localhost:4466`
});
export const prisma = new Prisma();
